import{_ as a,a as n}from"./chunks/malink_gen_ui_languages.DXP1stzv.js";import{_ as t,c as i,a8 as s,o}from"./chunks/framework.CnRC9NRC.js";const v=JSON.parse('{"title":"Generating MAVLink Libraries","description":"","frontmatter":{},"headers":[],"relativePath":"en/getting_started/generate_libraries.md","filePath":"en/getting_started/generate_libraries.md"}'),r={name:"en/getting_started/generate_libraries.md"};function l(p,e,c,d,g,h){return o(),i("div",null,e[0]||(e[0]=[s('<h1 id="generating-mavlink-libraries" tabindex="-1">Generating MAVLink Libraries <a class="header-anchor" href="#generating-mavlink-libraries" aria-label="Permalink to &quot;Generating MAVLink Libraries&quot;">​</a></h1><p>Language-specific MAVLink libraries can be created from <a href="./../messages/">XML Message Definitions</a> using <em>code generator</em> tools.</p><p>This page shows how to use the following two code generators provided with the MAVLink project:</p><ul><li>GUI tool: <a href="#mavgenerate">mavgenerate</a></li><li>Command line tool: <a href="#mavgen">mavgen</a>, which is the backend tool used also by mavgenerate</li></ul><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>These generators can build MAVLink 2 and MAVLink 1 libraries for the following programming languages: C, C++11, Python, Typescript, Java, and WLua. The following programming languages are supported for MAVLink 1 libraries only: C#, JavaScript, ObjC, Swift.</p></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>Generators for other programming languages are supported and documented in independent projects. For more information see <a href="./../#supported_languages">Supported Languages</a>.</p></div><h2 id="pre-requisites" tabindex="-1">Pre-requisites <a class="header-anchor" href="#pre-requisites" aria-label="Permalink to &quot;Pre-requisites&quot;">​</a></h2><ol><li><p>You must already have <a href="./../getting_started/installation.html">Installed the MAVLink toolchain</a>, which includes the mavgenerate and mavgen tools used below as well as the <a href="./../messages/">XML Message Definitions</a>.</p></li><li><p>If you are generating messages for a <a href="./../messages/#dialects">custom dialect</a>, copy the dialect <a href="./../messages/#xml-definition-files--dialects">XML definition file(s)</a> into the directory <a href="https://github.com/mavlink/mavlink/tree/master/message_definitions/v1.0" target="_blank" rel="noreferrer">message_definitions/v1.0/</a>.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><em>mavgen</em> can handle dialects that have relative paths for included XML files (e.g typically <a href="./../messages/common.html">common.xml</a>), but other generators may not. We recommend putting custom dialects in the same folder as the ones that come with the <a href="https://github.com/mavlink/mavlink" target="_blank" rel="noreferrer">mavlink/mavlink</a> repository.</p></div></li></ol><h2 id="mavgenerate" tabindex="-1">Building MAVLink libraries using the Mavgenerate GUI <a class="header-anchor" href="#mavgenerate" aria-label="Permalink to &quot;Building MAVLink libraries using the Mavgenerate GUI {#mavgenerate}&quot;">​</a></h2><p><strong>mavgenerate.py</strong> is GUI code generator for MAVLink, written in Python.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><em>Mavgenerate</em> provides a GUI front end to the <a href="#mavgen">mavgen</a> command line code generator, and supports the same <a href="#mavgen_options">options</a>.</p></div><p>The GUI can be launched from anywhere using Python&#39;s <code>-m</code> argument:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mavgenerate</span></span></code></pre></div><p><img src="'+a+'" alt="mavgenerate UI"></p><p>Steps for generating the MAVLink library code:</p><ol><li><p>Choose the target XML file (typically in <a href="https://github.com/mavlink/mavlink/tree/master/message_definitions/v1.0" target="_blank" rel="noreferrer">mavlink/message_definitions/1.0</a>).</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>If using a custom dialect, first copy it into the above directory (if the dialect is dependent on <strong>common.xml</strong> it must be located in the same directory).</p></div></li><li><p>Choose an output directory (e.g. <strong>mavlink/include</strong>).</p></li><li><p>Select the target output programming language.</p><p><img src="'+n+`" alt="mavgenerate UI - language list"></p><p>For JavaScript in particular there are three options:</p><ul><li><code>JavaScript_Stable</code> is an older version that only supports MAVLink 1.0,</li><li><code>JavaScript_NextGen</code> is a more recent version that supports MAVLink 1 and 2 along with signing.</li><li><code>JavaScript</code> is a &quot;proxy&quot; for the recommended version. Currently this is <code>JavaScript_Stable</code>.</li></ul></li><li><p>Select the target MAVLink protocol version. Ideally use 2.0 if the generator supports it.</p><blockquote><p><strong>Caution</strong> Generation will fail if the protocol is not <a href="./../#supported_languages">supported</a> by the selected programming language.</p></blockquote></li><li><p>Optionally check <em>Validate</em> and/or <em>Validate Units</em>, which validates XML specifications.</p></li><li><p>Click <strong>Generate</strong> to create the source files for the MAVLink library and the chosen dialect.</p></li></ol><h2 id="mavgen" tabindex="-1">Building MAVLink libraries using the Mavgen Command Line Tool <a class="header-anchor" href="#mavgen" aria-label="Permalink to &quot;Building MAVLink libraries using the Mavgen Command Line Tool {#mavgen}&quot;">​</a></h2><p><strong>mavgen.py</strong> is a command line tool for generating MAVLink libraries for various programming languages. You can run mavgen from the <code>mavlink</code> directory. However, if you are outside of the mavlink directory, you need to add the <code>mavlink</code> directory to the <code>PYTHONPATH</code> environment variable.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>Mavgen is the backend used by <a href="#mavgenerate">mavgenerate</a>. The documentation below explains all the options for both tools.</p></div><p>Below is an example for how to generate <em>MAVLink 2</em> libraries for the C programming language using a dialect named <strong>your_custom_dialect.xml</strong>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pymavlink.tools.mavgen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --lang=C</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --wire-protocol=2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --output=generated/include/mavlink/v2.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> message_definitions/v1.0/your_custom_dialect.xml</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The syntax for for generating Python modules is the same, except that the <code>--output</code> specifies a <em>filename</em> rather than a directory.</p></div><p><span id="mavgen_options"></span> The full syntax and options can be output by running <code>mavgen.py -h</code> flag, which is reproduced below:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>usage: mavgen.py [-h] [-o OUTPUT] [--lang {Ada,C,CS,JavaScript,JavaScript_Stable,JavaScript_NextGen,TypeScript,Python2,Python3,Python,Lua,WLua,ObjC,Swift,Java,C++11}]</span></span>
<span class="line"><span>                 [--wire-protocol {0.9,1.0,2.0}] [--no-validate] [--error-limit ERROR_LIMIT] [--strict-units]</span></span>
<span class="line"><span>                 XML [XML ...]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This tool generate implementations from MAVLink message definitions</span></span>
<span class="line"><span></span></span>
<span class="line"><span>positional arguments:</span></span>
<span class="line"><span>  XML                   MAVLink definitions</span></span>
<span class="line"><span></span></span>
<span class="line"><span>options:</span></span>
<span class="line"><span>  -h, --help            show this help message and exit</span></span>
<span class="line"><span>  -o OUTPUT, --output OUTPUT</span></span>
<span class="line"><span>                        output directory.</span></span>
<span class="line"><span>  --lang {Ada,C,CS,JavaScript,JavaScript_Stable,JavaScript_NextGen,TypeScript,Python2,Python3,Python,Lua,WLua,ObjC,Swift,Java,C++11}</span></span>
<span class="line"><span>                        language of generated code [default: Python]</span></span>
<span class="line"><span>  --wire-protocol {0.9,1.0,2.0}</span></span>
<span class="line"><span>                        MAVLink protocol version. [default: 1.0]</span></span>
<span class="line"><span>  --no-validate         Do not perform XML validation. Can speed up code generation if XML files are known to be correct.</span></span>
<span class="line"><span>  --error-limit ERROR_LIMIT</span></span>
<span class="line"><span>                        maximum number of validation errors to display</span></span>
<span class="line"><span>  --strict-units        Perform validation of units attributes.</span></span></code></pre></div>`,24)]))}const k=t(r,[["render",l]]);export{v as __pageData,k as default};
