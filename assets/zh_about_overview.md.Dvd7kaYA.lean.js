import{_ as s,c as a,a8 as t,o as e}from"./chunks/framework.CnRC9NRC.js";const g=JSON.parse('{"title":"飞控通讯协议概况","description":"","frontmatter":{},"headers":[],"relativePath":"zh/about/overview.md","filePath":"zh/about/overview.md"}'),n={name:"zh/about/overview.md"};function h(l,i,r,o,p,k){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="飞控通讯协议概况" tabindex="-1">飞控通讯协议概况 <a class="header-anchor" href="#飞控通讯协议概况" aria-label="Permalink to &quot;飞控通讯协议概况&quot;">​</a></h1><p>MAVLink 为一种设计用于资源受限系统及带宽受限链路的二进制遥测协议。 MAVLink 主要发行了两个版本: v1.0 和 v2.0 ，这两个版本向后兼容 （即 v2.0 版可以分析和发送 v1.0 版数据包)。 遥测数据流是以广播方式发送的， 而协议方面改变了系统配置， 并保证诸如<a href="../services/mission.md">任务协议</a>或参数协议&lt;/1&gt; 这类点对点式、需重新传输的消息。 MAVLink 主要发行了两个版本: v1.0 和 v2.0 ，这两个版本向后兼容 （即 v2.0 版可以分析和发送 v1.0 版数据包)。 Telemetry data streams are sent in a multicast design while protocol aspects that change the system configuration and require guaranteed delivery like the <a href="./../services/mission.html">mission protocol</a> or <a href="./../services/parameter.html">parameter protocol</a> are point-to-point with retransmission.</p><h2 id="mavlink-2-的数据包格式" tabindex="-1">MAVLink 2 的数据包格式 <a class="header-anchor" href="#mavlink-2-的数据包格式" aria-label="Permalink to &quot;MAVLink 2 的数据包格式&quot;">​</a></h2><p>Below is the over-the-wire format for a <a href="./../guide/mavlink_2.html">MAVLink v2</a> packet. 内存中的表示方式可能会有所不同。</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> magic;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              ///&lt; protocol magic marker</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                ///&lt; Length of payload</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> incompat_flags;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     ///&lt; flags that must be understood</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> compat_flags;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       ///&lt; flags that can be ignored if not understood</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> seq;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                ///&lt; Sequence of packet</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sysid;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              ///&lt; ID of message sender system/aircraft</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> compid;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             ///&lt; ID of the message sender component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msgid </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          ///&lt; first 8 bits of the ID of the message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msgid </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         ///&lt; middle 8 bits of the ID of the message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msgid </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ///&lt; last 8 bits of the ID of the message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[max </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   ///&lt; A maximum of 255 payload bytes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> checksum;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          ///&lt; CRC-16/MCRF4XX</span></span></code></pre></div><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> signature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ///&lt; Signature which allows ensuring that the link is tamper-proof (optional)</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The <a href="./../guide/serialization.html#v1_packet_format">MAVLink 1 packet format</a> is similar, but omits <code>incompat_flags</code>, <code>compat_flags</code> and <code>signature</code>, and only has a single byte for the message address. For more information see <a href="./../guide/serialization.html#packet_format">Serialization &gt; Packet Format</a>.</p></div><h2 id="串行化" tabindex="-1">串行化 <a class="header-anchor" href="#串行化" aria-label="Permalink to &quot;串行化&quot;">​</a></h2><p>MAVLink 链路上的数据包格式是专为资源受限优化过的，所以其中数据域的次序与 XML 规则中的次序不一致。 The over-the-wire generator sorts all fields of the message according to size, with the largest fields (<code>uint64_t</code>) first, then down to smaller fields. The sorting is done using a <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability" target="_blank" rel="noreferrer">stable sorting algorithm</a>, which ensures that any fields that do not need to be reordered stay in the same relative order. 这也可以避免编解码时的对齐问题，使打包/解包算法更高效。</p><p>For more information and specific exceptions see <a href="./../guide/serialization.html">Serialization</a>.</p><h2 id="multicast-streams-vs-guaranteed-delivery" tabindex="-1">Multicast Streams vs. Guaranteed Delivery <a class="header-anchor" href="#multicast-streams-vs-guaranteed-delivery" aria-label="Permalink to &quot;Multicast Streams vs. Guaranteed Delivery&quot;">​</a></h2><p>Mavlink 是为混合网络系统构建的。在这些网络中，高速数据流从数据源（通常是无人机）流向数据接收器 （通常是地面站），但是它与确保是发送的数据流是混合在一起的。 The key insight is that for most <strong>telemetry streams</strong> there is not a known or single recipient: Instead, typically an onboard computer, a ground control station and a cloud system all need the same data stream.</p><p>On the other hand configuring the <strong>onboard mission</strong> or changing the system configuration with <strong>onboard parameters</strong> requires point-to-point communication with guaranteed delivery. 通过使用多种发送方式，MAVLink 可达到很高的效率。</p><h2 id="主题模式-发布-订阅式" tabindex="-1">主题模式（发布-订阅式） <a class="header-anchor" href="#主题模式-发布-订阅式" aria-label="Permalink to &quot;主题模式（发布-订阅式）&quot;">​</a></h2><p>在主题模式下，协议将不会为了节省带宽而省略掉目标系统及组件的 ID 号。 所有自动驾驶仪的数据流如位置、姿态都是这种通信模式的例子。</p><p>这种广播式通信的优点是没有额外的数据包头，且多个订阅者都可接收此数据。</p><h2 id="点对点式通信" tabindex="-1">点对点式通信 <a class="header-anchor" href="#点对点式通信" aria-label="Permalink to &quot;点对点式通信&quot;">​</a></h2><p>在点对点式通信中，MAVLink 使用目标系统的 ID 号和组件的 ID 号。 在使用这些域（任务，参数，命令）的多数情况下，子协议也可以保证采用确保式发送。</p><h2 id="完整性检查-校验和" tabindex="-1">完整性检查/校验和 <a class="header-anchor" href="#完整性检查-校验和" aria-label="Permalink to &quot;完整性检查/校验和&quot;">​</a></h2><p>MAVLink implements two integrity checks: The first check is on the integrity of the packet during transmission using the CRC-16/MCRF4XX checksum. 但是这只能保证数据没被链路改变，不能保证数据定义的一致性。 The second integrity check is on the <a href="https://en.wikipedia.org/wiki/Data_definition_language" target="_blank" rel="noreferrer">data description</a> to ensure that two messages with the same ID are indeed containing the same information. 为了达到此目的，数据定义本身也进行了 CRC-16-CCITT ，结果用作此数据包 CRC 的种子。 Most reference implementations store this constant in an array named <strong>CRC_EXTRA</strong>.</p>`,20)]))}const c=s(n,[["render",h]]);export{g as __pageData,c as default};
