import{_ as i,c as a,a8 as e,o as n}from"./chunks/framework.CnRC9NRC.js";const c=JSON.parse('{"title":"使用 C MAVLink 库 (mavgen)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/mavgen_c/index.md","filePath":"zh/mavgen_c/index.md"}'),t={name:"zh/mavgen_c/index.md"};function l(h,s,p,r,d,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="使用-c-mavlink-库-mavgen" tabindex="-1">使用 C MAVLink 库 (mavgen) <a class="header-anchor" href="#使用-c-mavlink-库-mavgen" aria-label="Permalink to &quot;使用 C MAVLink 库 (mavgen)&quot;">​</a></h1><p>The MAVLink C library generated by <em>mavgen</em> is a header-only implementation that is highly optimized for resource-constrained systems with limited RAM and flash memory. 这种库，已经过现场验证, 并部署在许多产品中, 充当不同厂家组件之间的交互性接口。</p><p>This topic explains how to get and use the library.</p><h2 id="get_libraries" tabindex="-1">Getting the C MAVLink Library <a class="header-anchor" href="#get_libraries" aria-label="Permalink to &quot;Getting the C MAVLink Library {#get_libraries}&quot;">​</a></h2><p>If you are using a <a href="./../messages/#dialects">standard dialect</a> then download the <em>MAVLink 2</em> library from Github: <a href="https://github.com/mavlink/c_library_v2" target="_blank" rel="noreferrer">c_library_v2</a>.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>The MAVLink 2 library supports both MAVLink 2 and MAVLink 1, and is rebuilt for all the <em>standard dialects</em> whenever any of the definitions in the <em>mavlink/mavlink</em> repo change. It supersedes the MAVLink 1 library (<a href="https://github.com/mavlink/c_library_v1" target="_blank" rel="noreferrer">c_library_v1</a>), and should be used by preference.</p></div><p>If you need libraries for a custom dialect then you will need to <a href="./../getting_started/installation.html">install mavgen</a> and <a href="./../getting_started/generate_libraries.html">generate</a> them yourself. These can then be used in the same way as the pre-generated libraries.</p><p>The libraries can be placed/generated anywhere in your project tree.</p><h2 id="adding-libraries" tabindex="-1">Adding Libraries <a class="header-anchor" href="#adding-libraries" aria-label="Permalink to &quot;Adding Libraries&quot;">​</a></h2><p>This example below assumes the MAVLink headers to be located in: <strong>generated/include/mavlink/</strong>.</p><p>To use MAVLink in your C project, include the <strong>mavlink.h</strong> header file for your dialect:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;mavlink/your_dialect/mavlink.h&gt;</span></span></code></pre></div><p>This will automatically add the header files for all messages in your dialect, and for any dialect files that it includes.</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>Only include the header file for a single dialect. If you need to support messages from a <em>number of dialects</em> then create a new &quot;parent&quot; dialect XML file that includes them (and use its generated header as shown above).</p></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p><em>Do not include the individual message files</em>. If you generate your own headers, you will have to add their output location to your C compiler&#39;s search path.</p></div><p>When compiling the project, make sure to add the include directory:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generated/include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div><h2 id="adding-library-to-cmake-project" tabindex="-1">Adding Library to Cmake Project <a class="header-anchor" href="#adding-library-to-cmake-project" aria-label="Permalink to &quot;Adding Library to Cmake Project&quot;">​</a></h2><p>To include the headers in cmake, install them locally, e.g. into the directory <code>install</code>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_INSTALL_PREFIX=install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DMAVLINK_DIALECT=common</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DMAVLINK_VERSION=2.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>Then use <code>find_package</code> to get the dependency in <code>CMakeLists.txt</code>:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">find_package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MAVLink REQUIRED)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_program my_program.c)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_program </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAVLink::mavlink)</span></span></code></pre></div><p>And pass the local install directory to cmake (adapt to your directory structure):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../my_program</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_PREFIX_PATH=../mavlink/install</span></span></code></pre></div><h3 id="build-warnings" tabindex="-1">Build Warnings <a class="header-anchor" href="#build-warnings" aria-label="Permalink to &quot;Build Warnings&quot;">​</a></h3><h4 id="waddress-of-packed-member" tabindex="-1"><code>-Waddress-of-packed-member</code> <a class="header-anchor" href="#waddress-of-packed-member" aria-label="Permalink to &quot;\`-Waddress-of-packed-member\`&quot;">​</a></h4><p>Building the headers may result in warnings like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mavlink/common/../mavlink_helpers.h:86:24: warning: taking address of packed member of ‘__mavlink_message’ may result in an unaligned pointer value [-Waddress-of-packed-member]</span></span>
<span class="line"><span>   86 |  crc_accumulate_buffer(&amp;msg-&gt;checksum, _MAV_PAYLOAD(msg), msg-&gt;len);</span></span></code></pre></div><p>The warning indicates the potential for hard faults caused by unaligned access to packed data. This does not happen on most of the common architectures on which MAVLink is run, and generally the warning can be supressed.</p><p>You can suppress the warnings using <code>-Wno-address-of-packed-member</code>.</p><blockquote><p><strong>Note:</strong> The issue causes hard faults on <a href="https://github.com/ArduPilot/pymavlink/issues/5" target="_blank" rel="noreferrer">Cortex-M0</a> and other platforms <a href="https://github.com/ArduPilot/pymavlink/issues/836#issue-1788623502" target="_blank" rel="noreferrer">listed here</a>. Please raise issues in <a href="https://github.com/ArduPilot/pymavlink/" target="_blank" rel="noreferrer">ArduPilot/pymavlink</a> if you find other hardware that is affected.</p></blockquote><h2 id="upgrading-library-from-mavlink-1" tabindex="-1">Upgrading Library from MAVLink 1 <a class="header-anchor" href="#upgrading-library-from-mavlink-1" aria-label="Permalink to &quot;Upgrading Library from MAVLink 1&quot;">​</a></h2><p>The <em>MAVLink 1</em> pre-built library <a href="https://github.com/mavlink/c_library_v1" target="_blank" rel="noreferrer">mavlink/c_library_v1</a> can be upgraded by simply dropping in the <em>MAVLink 2</em> library from Github: <a href="https://github.com/mavlink/c_library_v2" target="_blank" rel="noreferrer">mavlink/c_library_v2</a>.</p><p>The <em>MAVLink 2</em> C library offers the same range of APIs as was offered by <em>MAVLink 1</em>.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The major change from an API perspective is that you don&#39;t need to provide a message CRC table any more, or message length table. These have been folded into a single packed table, replacing the old table which was indexed by <code>msgId</code>. That was necessary to cope with the much larger 24 bit namespace of message IDs.</p></div><p><em>MAVLink 2</em> usage is covered in the following sections (this includes <a href="#mavlink_1">Working with MAVLink 1</a> which explains how you can communicate with both <em>MAVLink 2</em> and <em>MAVLink 1</em> (only) libraries).</p><h2 id="channels" tabindex="-1">Multiple Streams (&quot;channels&quot;) <a class="header-anchor" href="#channels" aria-label="Permalink to &quot;Multiple Streams (&quot;channels&quot;) {#channels}&quot;">​</a></h2><p>The C MAVLink library utilizes a &quot;channel&quot; metaphor to allow for simultaneous processing of multiple, independent MAVLink streams in the same program. All receiving and transmitting functions provided by this library require a channel, and it is important to use the correct channel for each operation.</p><p>By default up to 16 channels may be defined on Windows, Linux and macOS, and up to 4 channels may be define on other systems. Systems can specify a different maximum number of channels/comms buffers using <code>MAVLINK_COMM_NUM_BUFFERS</code> (for example, this might be reduced to 1 if running MAVLink on very memory constrained hardware).</p><p>If only one MAVLink stream exists, channel 0 should be used by specifying the <code>MAVLINK_COMM_0</code> constant.</p><h2 id="receiving" tabindex="-1">Receiving <a class="header-anchor" href="#receiving" aria-label="Permalink to &quot;Receiving&quot;">​</a></h2><p>MAVLink reception/decoding is done in a number of phases:</p><ol><li>Parse the incoming stream into objects representing each packet (<code>mavlink_message_t</code>).</li><li>Decode the MAVLink message contained in the packet payload into a C struct (that has fields mapping the original XML definition).</li></ol><p>These steps are demonstrated below.</p><h3 id="parsing-packets" tabindex="-1">Parsing Packets <a class="header-anchor" href="#parsing-packets" aria-label="Permalink to &quot;Parsing Packets&quot;">​</a></h3><p>The <code>mavlink_parse_char(...)</code> convenience function (<a href="https://github.com/mavlink/c_library_v2/blob/master/mavlink_helpers.h" target="_blank" rel="noreferrer">mavlink_helpers.h</a>) is used to parse incoming MAVLink data. The function parses the data one byte at a time, returning 0 (<code>MAVLINK_FRAMING_INCOMPLETE</code>) as it progresses, and 1 (<code>MAVLINK_FRAMING_OK</code>) on successful decoding of a packet. The <code>r_mavlink_status</code> parameter is updated with the channel status/errors as decoding progresses (you can check <code>mavlink_status_t.msg_received</code> to get the current byte&#39;s decode status/error and <code>mavlink_status_t.parse_state</code> for the current parse state). On successful decoding of a packet, the <code>r_message</code> argument is populated with an object representing the decoded packet.</p><p>The function prototype and parameters are shown below:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MAVLINK_HELPER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mavlink_parse_char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> chan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mavlink_message_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> r_message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mavlink_status_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> r_mavlink_status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Parameters:</p><ul><li><code>uint8_t chan</code>: ID of the current channel.</li><li><code>uint8_t c</code>: The char to parse.</li><li><a href="https://github.com/ArduPilot/pymavlink/blob/c0f5bb2695a677721aa7bb8f20be40ba8274c3d4/generator/C/include_v2.0/mavlink_types.h#L108" target="_blank" rel="noreferrer"><code>mavlink_message_t*</code></a> <code>r_message</code>: On success, the decoded message. NULL if the message couldn&#39;t be decoded.</li><li><a href="https://github.com/ArduPilot/pymavlink/blob/c0f5bb2695a677721aa7bb8f20be40ba8274c3d4/generator/C/include_v2.0/mavlink_types.h#L217" target="_blank" rel="noreferrer"><code>mavlink_status_t*</code></a> <code>r_mavlink_status</code>: The channel statistics, including information about the current parse state.</li></ul><p>Returns: <code>0</code> if the packet decoding is incomplete. <code>1</code> if the packet successfully decoded.</p><p>The code fragment below shows the typical use of this function when reading data from a serial port (<code>serial</code>):</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;mavlink/common/mavlink.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mavlink_status_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mavlink_message_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAVLINK_COMM_0;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(serial.bytesAvailable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNextByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavlink_parse_char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chan, byte, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received message with ID </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, sequence: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from component </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of system </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg.msgid, msg.seq, msg.compid, msg.sysid);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... DECODE THE MESSAGE PAYLOAD HERE ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>The <a href="https://github.com/mavlink/c_library_v2/blob/master/mavlink_helpers.h" target="_blank" rel="noreferrer">mavlink_helpers.h</a> include other parser functions: <code>mavlink_frame_char()</code> and <code>mavlink_frame_char_buffer()</code>. Generally you will want to use <code>mavlink_parse_char()</code> (which calls those functions internally), but reviewing the other methods can give you a better understanding of the parsing process.</p></div><h3 id="decode_payload" tabindex="-1">Decoding the Payload <a class="header-anchor" href="#decode_payload" aria-label="Permalink to &quot;Decoding the Payload {#decode_payload}&quot;">​</a></h3><p>The message/packet object retrieved in the previous section(<code>mavlink_message_t</code>) contains fields in the <a href="./../guide/serialization.html">MAVLink packet/serialization</a> format - including the message id (<code>msgid</code>) and the payload (<code>payload64</code>).</p><p>To get the fields of the <em>specific message</em> in the packet you need to further decode the payload. This is typically done by providing a <code>case</code> statement that maps the <em>ids</em> of the messages you wish to decode to appropriate decoder functions. The code fragment below shows this for two messages (the first decodes a whole message into a C struct, while the second gets just a single field):</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavlink_parse_char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chan, byte, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span></code></pre></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg.msgid) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAVLINK_MSG_ID_GLOBAL_POSITION_INT:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ID for GLOBAL_POSITION_INT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Get all fields in payload (into global_position)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          mavlink_msg_global_position_int_decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global_position);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAVLINK_MSG_ID_GPS_STATUS:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Get just one field from payload</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          visible_sats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mavlink_msg_gps_status_get_satellites_visible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The decoder/encoder functions and ids for each message in a dialect can be found in separate header files under the dialect folder. The headers are named with a format including the message name (<strong>mavlink_msg_<em>message_name</em>.h</strong>)</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>Individual message definitions for the dialect are pulled in when you include <strong>mavlink.h</strong> for your dialect, so you don&#39;t need to include these separately.</p></div><p>The most useful decoding function is named with the pattern <strong>mavlink_msg_<em>message_name</em>_decode()</strong>, and extracts the whole payload into a C struct (with fields mapping to the original XML message definition). There are also separate decoder functions to just get the values of individual fields.</p><p>For example, the common message <a href="./../messages/common.html#GLOBAL_POSITION_INT">GLOBAL_POSITION_INT</a> is generated to <a href="https://github.com/mavlink/c_library_v2/blob/master/common/mavlink_msg_global_position_int.h" target="_blank" rel="noreferrer">common/mavlink_msg_global_position_int.h</a>, and contains the following definitions:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Message ID number definition</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MAVLINK_MSG_ID_GLOBAL_POSITION_INT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 33</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Function to decode whole message into C struct</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mavlink_msg_global_position_int_decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mavlink_message_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mavlink_global_position_int_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> global_position_int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// C-struct with fields mapping to original message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MAVPACKED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __mavlink_global_position_int_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time_boot_ms;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*&lt; [ms] Timestamp (time since system boot).*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lat;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*&lt; [degE7] Latitude, expressed*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lon;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*&lt; [degE7] Longitude, expressed*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*&lt; [mm] Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL.*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> relative_alt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*&lt; [mm] Altitude above ground*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vx;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*&lt; [cm/s] Ground X Speed (Latitude, positive north)*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vy;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*&lt; [cm/s] Ground Y Speed (Longitude, positive east)*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vz;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*&lt; [cm/s] Ground Z Speed (Altitude, positive down)*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hdg;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*&lt; [cdeg] Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mavlink_global_position_int_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Function to get just a single field from the payload (in this case, the altitude).</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int32_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mavlink_msg_global_position_int_get_alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mavlink_message_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="decode_command" tabindex="-1">Command Decoding <a class="header-anchor" href="#decode_command" aria-label="Permalink to &quot;Command Decoding {#decode_command}&quot;">​</a></h3><p>A <a href="./../services/command.html">MAVLink Command</a> encodes a command defined in a <a href="./../messages/common.html#mav_commands">MAV_CMD</a> enum value into a <a href="./../messages/common.html#COMMAND_INT">COMMAND_INT</a> or <a href="./../messages/common.html#COMMAND_LONG">COMMAND_LONG</a> message.</p><p>Command packets are parsed and decoded in the same way as <a href="#decode_payload">any other payload</a> - i.e. you switch on message id of <code>MAVLINK_MSG_ID_COMMAND_INT</code>/<code>MAVLINK_MSG_ID_COMMAND_LONG</code> and call the decoder functions <code>mavlink_msg_command_int_decode()</code>/<code>mavlink_msg_command_long_decode()</code> (respectively) to get a C struct mapping the original message.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The message types differ in that <code>COMMAND_INT</code> has <code>int32</code> types for parameter fields 6 and 7 (instead of <code>float</code>) and also includes a field for the geometric frame of reference of any positional information in the command.</p></div><p>To decode the specific command you then switch on the value of the <code>mavlink_command_int_t.command</code> or <code>mavlink_command_long_t.command</code> field, which contains the particular <code>MAV_CMD</code> id.</p><p>Further interpretation and handling of the message then has to be done manually (there are no convenience functions).</p><h3 id="additional-checks" tabindex="-1">Additional Checks <a class="header-anchor" href="#additional-checks" aria-label="Permalink to &quot;Additional Checks&quot;">​</a></h3><p>The library have a number of <code>#define</code> values that you can set to enable various features:</p><ul><li><code>MAVLINK_CHECK_MESSAGE_LENGTH</code>: Enable this option to check the length of each message. This allows invalid messages to be caught much sooner. Use if the transmission medium is prone to missing (or extra) characters (e.g. a radio that fades in and out). Only use if the channel will only contain messages types listed in the headers.</li></ul><h2 id="transmitting" tabindex="-1">Transmitting <a class="header-anchor" href="#transmitting" aria-label="Permalink to &quot;Transmitting&quot;">​</a></h2><p>Transmitting messages can be done by using the <code>mavlink_msg_*_pack()</code> function, where one is defined for every message. The packed message can then be serialized with <code>mavlink_helpers.h:mavlink_msg_to_send_buffer()</code> and then writing the resultant byte array out over the appropriate serial interface.</p><p>It is possible to simplify the above by writing wrappers around the transmitting/receiving code. A multi-byte writing macro can be defined, <code>MAVLINK_SEND_UART_BYTES()</code>, or a single-byte function can be defined, <code>comm_send_ch()</code>, that wrap the low-level driver for transmitting the data. If this is done, <code>MAVLINK_USE_CONVENIENCE_FUNCTIONS</code> must be defined.</p><h2 id="消息签名" tabindex="-1">消息签名 <a class="header-anchor" href="#消息签名" aria-label="Permalink to &quot;消息签名&quot;">​</a></h2><p><a href="./../guide/message_signing.html">Message Signing (authentication)</a> allows a <em>MAVLink 2</em> system to verify that messages originate from a trusted source.</p><p>The C libraries generated by <em>mavgen</em> provide <em>almost everything</em> needed to support message signing in your MAVLink system. The topic <a href="./../mavgen_c/message_signing_c.html">C Message Signing</a> explains the remaining code that a system must implement to enable signing using the C library.</p><h2 id="connection-heartbeat" tabindex="-1">Connection/Heartbeat <a class="header-anchor" href="#connection-heartbeat" aria-label="Permalink to &quot;Connection/Heartbeat&quot;">​</a></h2><p>The sections above explain how you can send and receive messages. What messages are sent/received depends on the systems that you&#39;re working with. The set of messages that most systems can send are documented in <a href="./../messages/common.html">common.xml</a> and there are various microservices <a href="./../services/">microservices</a> that you may want to use.</p><p>Minimally MAVLink components should implement the <a href="./../services/heartbeat.html">HEARTBEAT/Connection protocol</a> as this is used by other systems as proof-of-life for the component, and also for <a href="./../guide/routing.html">routing</a>.</p><h2 id="mavlink_1" tabindex="-1">Working with MAVLink 1 <a class="header-anchor" href="#mavlink_1" aria-label="Permalink to &quot;Working with MAVLink 1 {#mavlink_1}&quot;">​</a></h2><p>This section explains how to use the MAVLink 2 C library to work with MAVLink 1 systems.</p><h3 id="版本对接-谈判" tabindex="-1">版本对接/谈判 <a class="header-anchor" href="#版本对接-谈判" aria-label="Permalink to &quot;版本对接/谈判&quot;">​</a></h3><p><a href="./../guide/mavlink_version.html">MAVLink Versions</a> explains the <a href="./../guide/mavlink_version.html#version_handshaking">handshaking</a> used to determine the supported MAVLink version of either end of the channel, and how to <a href="./../guide/mavlink_version.html#negotiating_versions">negotiate the version to use</a>.</p><h3 id="sending-and-receiving-mavlink-1-packets" tabindex="-1">Sending and Receiving MAVLink 1 Packets <a class="header-anchor" href="#sending-and-receiving-mavlink-1-packets" aria-label="Permalink to &quot;Sending and Receiving MAVLink 1 Packets&quot;">​</a></h3><p>The <em>MAVLink 2</em> library will send packets in <em>MAVLink 2</em> framing by default. To force sending <em>MAVLink 1</em> packets on a particular channel you change the flags field of the status object.</p><p>For example, the following code causes subsequent packets on the given channel to be sent as <em>MAVLink 1</em>:</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mavlink_status_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chan_state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mavlink_get_channel_status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MAVLINK_COMM_0);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chan_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAVLINK_STATUS_FLAG_OUT_MAVLINK1;</span></span></code></pre></div><p>Incoming <em>MAVLink 1</em> packets will be automatically handled as <em>MAVLink 1</em>. If you need to determine if a particular message was received as <em>MAVLink 1</em> or <em>MAVLink 2</em> then you can use the <code>magic</code> field of the message. In c programming, this is done like this:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">magic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAVLINK_STX_MAVLINK1) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is a MAVLink 1 message</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>In most cases this should not be necessary as the XML message definition files for <em>MAVLink 1</em> and <em>MAVLink 2</em> are the same, so you can treat incoming <em>MAVLink 1</em> messages the same as <em>MAVLink 2</em> messages.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><em>MAVLink 1</em> is restricted to message IDs less than 256, so any messages with a higher message ID won&#39;t be received as <em>MAVLink 1</em>.</p></div><p>It is advisable to switch to <em>MAVLink 2</em> when the communication partner sends <em>MAVLink 2</em> (see <a href="./../guide/mavlink_version.html#version_handshaking">Version Handshaking</a>). The minimal solution is to watch incoming packets using code similar to this:</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavlink_parse_char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MAVLINK_COMM_0, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// check if we received version 2 and request a switch.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavlink_get_channel_status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MAVLINK_COMM_0)-&gt;flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAVLINK_STATUS_FLAG_IN_MAVLINK1)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// this will only switch to proto version 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		chan_state-&gt;flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MAVLINK_STATUS_FLAG_OUT_MAVLINK1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><p>The following examples show the use of the API.</p><ul><li><a href="./../mavgen_c/example_c_uart.html">UART Interface</a>: Simple C example of a MAVLink to UART interface for Unix-like systems.</li><li><a href="./../mavgen_c/example_c_udp.html">UDP Example</a>: Simple C example of a MAVLink UDP interface for Unix-like systems (Linux, MacOS, BSD, etc.).</li></ul><p>In addition, the C library is used in numerous open source systems:</p><ul><li><a href="https://github.com/PX4/Firmware/blob/master/src/modules/mavlink/mavlink_receiver.cpp" target="_blank" rel="noreferrer">PX4</a></li><li><a href="https://github.com/ArduPilot/ardupilot/blob/master/libraries/GCS_MAVLink/GCS_Common.cpp" target="_blank" rel="noreferrer">ArduPilot</a></li><li><a href="https://github.com/mavlink/MAVSDK/blob/develop/src/core/mavlink_receiver.cpp#L28-L51" target="_blank" rel="noreferrer">MAVSDK</a></li></ul>`,102)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
