import{_ as i,c as a,a8 as n,o as e}from"./chunks/framework.CnRC9NRC.js";const E=JSON.parse('{"title":"C 消息签名 (mavgen)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/mavgen_c/message_signing_c.md","filePath":"zh/mavgen_c/message_signing_c.md"}'),t={name:"zh/mavgen_c/message_signing_c.md"};function h(l,s,p,k,g,r){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="c-消息签名-mavgen" tabindex="-1">C 消息签名 (mavgen) <a class="header-anchor" href="#c-消息签名-mavgen" aria-label="Permalink to &quot;C 消息签名 (mavgen)&quot;">​</a></h1><p>One of the key features of <a href="./../guide/mavlink_2.html">MAVLink 2</a> is support for <a href="./../guide/message_signing.html">Message Signing</a> (authentication).</p><p>The C libraries generated by <em>mavgen</em> provide almost everything needed to support signing in your MAVLink system. 您需要将一些代码添加到:</p><ul><li>Handle the <a href="./../messages/common.html#SETUP_SIGNING">SETUP_SIGNING</a> message.</li><li>在链接上设置和拆分签名。</li><li>在持久存储中保存并加载密钥和时间戳</li><li>执行回拨以确定哪些(如果有) 未签名消息将被接受。</li></ul><h2 id="密钥管理-setup-signer" tabindex="-1">密钥管理 (SETUP_SIgner) <a class="header-anchor" href="#密钥管理-setup-signer" aria-label="Permalink to &quot;密钥管理 (SETUP_SIgner)&quot;">​</a></h2><p>密钥是32字节的二进制数据, 用于创建可由密钥的其他持有者验证的消息签名。 密钥应在网络中的一个系统 (通常是 GCS) 上创建, 并通过安全通道共享到其他受信任的设备。 系统必须具有共享密钥才能进行通信。 The general requirements for creating, storing, logging and sharing keys are covered in: <a href="./../guide/message_signing.html#secret_key">Message Signing &gt; Secret Key Management</a>.</p><p>The section <a href="#enabling_signing_channel">Enabling Signing on a Channel</a> below shows how to set the secret key used by each channel.</p><h2 id="处理时间戳" tabindex="-1">处理时间戳 <a class="header-anchor" href="#处理时间戳" aria-label="Permalink to &quot;处理时间戳&quot;">​</a></h2><p>时间戳是48位，从2015年1月1日起，单位为10微秒。 The general requirements for managing timestamps are covered in <a href="./../guide/message_signing.html#timestamp">Message Signing &gt; Timestamp Handling</a>.</p><p>该库自动处理一些规则：</p><ul><li>时间戳在从链接发送的每包消息上都增加一个。</li><li>更新时间戳，以便与最后接受的消息（如果它大于当前的当地时间戳）相匹配。</li><li>如果频道上的消息时间戳是在该频道上收到的最后一条消息之前，消息将被拒绝。</li></ul><p>每个 MAVLink 系统都有责任储存和恢复时间戳（这对于签字系统的安全至关重要）。 下面的 <a href="#enabling_signing_channel">Enabling Signing on a Channel</a> 部分显示了如何设置时间戳。 The section <a href="#enabling_signing_channel">Enabling Signing on a Channel</a> below shows how to set the timestamp.</p><h2 id="enabling_signing_channel" tabindex="-1">Enabling Signing on a Channel <a class="header-anchor" href="#enabling_signing_channel" aria-label="Permalink to &quot;Enabling Signing on a Channel {#enabling_signing_channel}&quot;">​</a></h2><p>To enable signing on a channel you need to fill in two pointers in the <code>status</code> structure for the channel. 这两个指针是:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mavlink_signing_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signing;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mavlink_signing_streams_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signing_streams;</span></span></code></pre></div><p>The <code>signing</code> pointer controls signing for this stream. 它是按流进行的，包含密匙、时间戳和一组标志，加上接受未签名数据包的可选回调函数。 典型的设置是:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mavlink_signing_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signing;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">signing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signing));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memcpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signing.secret_key, key.secret_key, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signing.link_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)chan;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signing.timestamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key.timestamp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signing.flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAVLINK_SIGNING_FLAG_SIGN_OUTGOING;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signing.accept_unsigned_callback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accept_unsigned_callback;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mavlink_status_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mavlink_get_channel_status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chan);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status.signing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">amp;signing;</span></span></code></pre></div><p>The <code>signing_streams</code> pointer is a structure used to record the previous timestamp for a <code>(linkId,srcSystem,SrcComponent)</code> tuple. 这必须指向所有通道共有的结构, 以防止通道间重播攻击。 典型设置:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mavlink_status_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mavlink_get_channel_status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chan);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status.signing_streams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signing_streams;</span></span></code></pre></div><p>The maximum number of signing streams supported is given by the <code>MAVLINK_MAX_SIGNING_STREAMS</code> macro. 这默认为 16, 但对于 gcs 实现来说, 这一点可能是值得的。 如果C的执行超出了签名的流程，那么新流将被拒绝。</p><h2 id="使用-accept-unsigned-callback" tabindex="-1">使用 accept_unsigned_callback <a class="header-anchor" href="#使用-accept-unsigned-callback" aria-label="Permalink to &quot;使用 accept_unsigned_callback&quot;">​</a></h2><p><a href="./../guide/message_signing.html#accepting_unsigned_packets">Message Signing &gt; Accepting Unsigned Packets</a> and <a href="./../guide/message_signing.html#accepting_incorrectly_signed_packets">Accepting Incorrectly Signed Packets</a> specify that a message signing implementation should provide mechanisms such that library users can choose to conditionally accept unsigned or incorrectly signed packets.</p><p>The C implementation provides the <code>accept_unsigned_callback()</code> function pointer for this purpose, which may optionally be set in the <a href="#enabling_signing_channel">signing</a> structure. 此函数的C原型是：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept_unsigned_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mavlink_status_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> msgId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>If set then this function will be called on any unsigned packet (including all <em>MAVLink 1</em> packets) or any packet where the signature is incorrect. 该功能为执行工作提供了一个途径，允许未签名的数据包被接受（并且错误地签名的数据包，在某些情况下可以接受）。</p><p>关于哪些未签名包应该接受的规则是具体的执行，但建议考虑以下规则：</p><ul><li>有一个机制标记一个特定的通信频道，使其安全（例如 USB 连接），以便能够签名设置。</li><li>always accept <code>RADIO_STATUS</code> packets for feedback from 3DR radios (which don&#39;t do signing)</li></ul><p>例如：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsigned_messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	MAVLINK_MSG_ID_RADIO_STATUS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept_unsigned_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mavlink_status_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> message_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// Make the assumption that channel 0 is USB and should always be accessible</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mavlink_get_channel_status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MAVLINK_COMM_0)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(unsigned_messages) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">unsigned_messages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">unsigned_messages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_id) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="handling_link_ids" tabindex="-1">Handling Link IDs <a class="header-anchor" href="#handling_link_ids" aria-label="Permalink to &quot;Handling Link IDs {#handling_link_ids}&quot;">​</a></h2><p>The purpose of the <code>link_id</code> field in the <em>MAVLink 2</em> signing structure is to prevent cross-channel replay attacks. Without the <code>link_id</code> an attacker could record a packet (such as a disarm request) on one channel, then play it back on a different channel.</p><p>使用链接ID的意图是，自动试验机和GCS之间的每个通信渠道都使用不同的链接ID。 但是，没有要求在两个方案中使用同样的链接ID。 但是，没有要求在两个方案中使用同样的链接ID。</p><p>C 执行显然的机制是使用 MAVLink 频道编号为链接ID。 这对于自驾仪工作大有助益，但成为 GCS 实现的一个问题。 问题是，用户可以通过不同的通信链接（例如两个无线电或 USB 和 USB）无线电发射多个 GCS 实例，与同一自动飞行器进行交谈。 这些多个 GCS 实例将不会意识到彼此，因此可以选择同一链接ID。 如果发生这种情况，许多正确签名的数据包将被自驾仪拒绝，因为它们的时间戳比收到其他通信链接上相同的流时间戳更早。</p><p>The solution adopted for <em>MAVProxy</em> is shown below:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_signed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() and</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	self.mav.signing.link_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> and</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_link_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> and</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	self.target_system </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_srcSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() and</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	self.target_component </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_srcComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	# change to link_id from incoming packet</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	self.mav.signing.link_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_link_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>这就是说，如果 MAVProx 使用的当前链接ID为零，它收到一个与非零链接ID的正确签名数据包，那么它将链接ID切换到接收的数据包。</p><p>这将使 GCS 从链接ID与自动试验器的链接ID具有影响。</p>`,37)]))}const c=i(t,[["render",h]]);export{E as __pageData,c as default};
