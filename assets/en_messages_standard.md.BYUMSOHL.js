import{_ as a,c as t,a8 as d,o as s}from"./chunks/framework.sDsl5pD6.js";const u=JSON.parse('{"title":"Dialect: MAVLINK Standard Message Set (standard.xml)","description":"","frontmatter":{},"headers":[],"relativePath":"en/messages/standard.md","filePath":"en/messages/standard.md"}'),i={name:"en/messages/standard.md"};function n(r,e,l,o,m,h){return s(),t("div",null,e[0]||(e[0]=[d('<h1 id="dialect-mavlink-standard-message-set-standard-xml" tabindex="-1">Dialect: MAVLINK Standard Message Set (standard.xml) <a class="header-anchor" href="#dialect-mavlink-standard-message-set-standard-xml" aria-label="Permalink to &quot;Dialect: MAVLINK Standard Message Set (standard.xml)&quot;">​</a></h1><p>The MAVLink <em>standard</em> message set contains <em>standard</em> definitions that are managed by the MAVLink project. The definitions are those that are expected to be implemented in all flight stacks/ground stations AND are likely to be implemented in a compatible way. The original definitions are defined in <a href="https://github.com/mavlink/mavlink/blob/master/message_definitions/v1.0/standard.xml" target="_blank" rel="noreferrer">standard.xml</a>.</p><p><span id="mav2_extension_field"></span></p><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li>MAVLink 2 <a href="./../guide/define_xml_element.html#message_extensions">extension fields</a> are displayed in blue.</li><li>Entities from dialects are displayed only as headings (with link to original)</li></ul></div><p><strong>Protocol dialect:</strong> 0</p><h2 id="mavlink-include-files" tabindex="-1">MAVLink Include Files <a class="header-anchor" href="#mavlink-include-files" aria-label="Permalink to &quot;MAVLink Include Files&quot;">​</a></h2><ul><li><a href="./../messages/minimal.html">minimal.xml</a></li></ul><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type</th><th>Defined</th><th>Included</th></tr></thead><tbody><tr><td><a href="#messages">Messages</a></td><td>0</td><td>2</td></tr><tr><td><a href="#enumerated-types">Enums</a></td><td>1</td><td>6</td></tr><tr><td>Commands</td><td>0</td><td>0</td></tr></tbody></table><p>The following sections list all entities in the dialect (both included and defined in this file).</p><h2 id="messages" tabindex="-1">Messages <a class="header-anchor" href="#messages" aria-label="Permalink to &quot;Messages&quot;">​</a></h2><h2 id="enumerated-types" tabindex="-1">Enumerated Types <a class="header-anchor" href="#enumerated-types" aria-label="Permalink to &quot;Enumerated Types&quot;">​</a></h2><h3 id="BOOL" tabindex="-1">BOOL <a class="header-anchor" href="#BOOL" aria-label="Permalink to &quot;BOOL {#BOOL}&quot;">​</a></h3><p>(Bitmask) Enum used to indicate true or false (also: success or failure, enabled or disabled, active or inactive).</p><table tabindex="0"><thead><tr><th>Value</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a id="BOOL_FALSE"></a>0</td><td><a href="#BOOL_FALSE">BOOL_FALSE</a></td><td>False.</td></tr><tr><td><a id="BOOL_TRUE"></a>1</td><td><a href="#BOOL_TRUE">BOOL_TRUE</a></td><td>True.</td></tr></tbody></table>',15)]))}const f=a(i,[["render",n]]);export{u as __pageData,f as default};
