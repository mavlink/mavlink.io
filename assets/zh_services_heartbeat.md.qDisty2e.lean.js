import{_ as t,c as o,a8 as a,o as n}from"./chunks/framework.CnRC9NRC.js";const p=JSON.parse('{"title":"Heartbeat/Connection Protocol","description":"","frontmatter":{},"headers":[],"relativePath":"zh/services/heartbeat.md","filePath":"zh/services/heartbeat.md"}'),s={name:"zh/services/heartbeat.md"};function i(r,e,c,d,m,l){return n(),o("div",null,e[0]||(e[0]=[a('<h1 id="heartbeat-connection-protocol" tabindex="-1">Heartbeat/Connection Protocol <a class="header-anchor" href="#heartbeat-connection-protocol" aria-label="Permalink to &quot;Heartbeat/Connection Protocol&quot;">​</a></h1><p>The heartbeat protocol is used to advertise the existence of a system on the MAVLink network, along with its system and component id, vehicle type, flight stack, component type, and flight mode.</p><p>The heartbeat allows other components to:</p><ul><li>discover systems that are connected to the network and infer when they have disconnected. A component is considered to be <em>connected to the network</em> if its <a href="./../messages/common.html#HEARTBEAT">HEARTBEAT</a> message is regularly received, and disconnected if a number of expected messages are not received.</li><li>handle other messages from the component appropriately, based on component type and other properties (e.g. layout a GCS interface based on vehicle type).</li><li><a href="./../guide/routing.html">route</a> messages to systems on different interfaces.</li></ul><h2 id="message-enum-summary" tabindex="-1">Message/Enum Summary <a class="header-anchor" href="#message-enum-summary" aria-label="Permalink to &quot;Message/Enum Summary&quot;">​</a></h2><table tabindex="0"><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td><a id="HEARTBEAT"></a><a href="./../messages/common.html#HEARTBEAT">HEARTBEAT</a></td><td>Broadcast that a MAVLink component is present and responding, along with its type (<a href="#MAV_TYPE">MAV_TYPE</a>) and other properties.</td></tr></tbody></table><table tabindex="0"><thead><tr><th>Enum</th><th>描述</th></tr></thead><tbody><tr><td><a id="MAV_TYPE"></a><a href="./../messages/common.html#MAV_TYPE">MAV_TYPE</a></td><td>Type of the component. Flight controllers must report the type of the vehicle on which they are mounted (e.g. MAV_TYPE_OCTOROTOR). All other components must report a value appropriate for their type (e.g. a camera must use <code>MAV_TYPE_CAMERA</code>).</td></tr><tr><td><a id="MAV_AUTOPILOT"></a><a href="./../messages/common.html#MAV_AUTOPILOT">MAV_AUTOPILOT</a></td><td>Autopilot type / class. Set to <code>MAV_AUTOPILOT_INVALID</code> for components that are not flight controllers (e.g. ground stations, gimbals, etc.).</td></tr><tr><td><a id="MAV_MODE_FLAG"></a><a href="./../messages/common.html#MAV_MODE_FLAG">MAV_MODE_FLAG</a></td><td>System mode bitmap.</td></tr><tr><td><a id="MAV_STATE"></a><a href="./../messages/common.html#MAV_STATE">MAV_STATE</a></td><td>System status flag.</td></tr></tbody></table><h2 id="heartbeat-broadcast-frequency" tabindex="-1">HEARTBEAT Broadcast Frequency <a class="header-anchor" href="#heartbeat-broadcast-frequency" aria-label="Permalink to &quot;HEARTBEAT Broadcast Frequency&quot;">​</a></h2><p>Components must regularly broadcast their <code>HEARTBEAT</code> and monitor for heartbeats from other components/systems.</p><p>The rate at which the <code>HEARTBEAT</code> message must be broadcast, and how many messages may be &quot;missed&quot; before a system is considered to have timed out/disconnected from the network, depends on the channel (it is not defined by MAVLink). On RF telemetry links, components typically publish their heartbeat at 1 Hz and consider another system to have disconnected if four or five messages are not received.</p><p>A component may choose not to send or broadcast information on a channel (other than the <code>HEARTBEAT</code>) if it does not detect another system, and it will continue to send messages to a system while it is receiving heartbeats. Therefore it is important that systems:</p><ul><li>broadcast a heartbeat even when not commanding the remote system.</li><li>do not broadcast a heartbeat when they are in a faulted state (i.e. do not publish a heartbeat from a separate thread that is unaware of the state of the rest of the component).</li></ul><h2 id="gcs" tabindex="-1">Connecting to a GCS or MAVLink API <a class="header-anchor" href="#gcs" aria-label="Permalink to &quot;Connecting to a GCS or MAVLink API {#gcs}&quot;">​</a></h2><p>The <code>HEARTBEAT</code> may also used by GCS (or Developer API) to determine if it <strong>can</strong> connect to a vehicle in order to collect telemetry and send missions/commands.</p><p>For example, <em>QGroundControl</em> will only connect to a vehicle system (i.e. not another GCS, gimbal, or onboard controller), and also checks that it has a non-zero system ID before displaying the vehicle connected message. QGC also uses the specific type of vehicle and other heartbeat information to control layout of the GUI.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The specific code for connecting to <em>QGroundControl</em> can be found in <a href="https://github.com/mavlink/qgroundcontrol/blob/master/src/Vehicle/MultiVehicleManager.cc" target="_blank" rel="noreferrer">MultiVehicleManager.cc</a> (see <code>void MultiVehicleManager::_vehicleHeartbeatInfo</code>).</p></div><h2 id="component-identity" tabindex="-1">Component Identity <a class="header-anchor" href="#component-identity" aria-label="Permalink to &quot;Component Identity&quot;">​</a></h2><p>The <em>type</em> of a component is obtained from its <a href="#HEARTBEAT"><code>HEARTBEAT.type</code></a> (<a href="#MAV_TYPE"><code>MAV_TYPE</code></a>) and <a href="#HEARTBEAT"><code>HEARTBEAT.autopilot</code></a> (<a href="#MAV_AUTOPILOT"><code>MAV_AUTOPILOT</code></a>) fields:</p><ul><li>A flight controller component must use a <code>MAV_TYPE</code> corresponding to a particular vehicle (e.g. <code>MAV_TYPE_FIXED_WING</code>, <code>MAV_TYPE_QUADROTOR</code> etc.), and set <code>HEARTBEAT.autopilot</code> to a valid flight stack.</li><li>All other components must use a <code>MAV_TYPE</code> corresponding to the actual type (e.g.: <code>MAV_TYPE_GIMBAL</code>, <code>MAV_TYPE_BATTERY</code>, etc.), and should set <code>HEARTBEAT.autopilot</code> to <code>MAV_AUTOPILOT_INVALID</code>.</li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>The recommended way to recognise an autopilot component is to check that <code>HEARTBEAT.autopilot</code> is not <code>MAV_AUTOPILOT_INVALID</code>.</p></div><p>Every component must have a system-unique component id, which is used for routing and for identifying multiple instances of a particular component type.</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>Historically the component id was also used to determine the component type. New code must not make any assumption about the type from the id used (type is determined from <code>HEARTBEAT.type</code>).</p></div><p>MAVLink recommends that <em>by default</em> components use a type-appropriate component id from <a href="./../messages/common.html#MAV_COMPONENT">MAV_COMPONENT</a>, and provide an interface to change the component id if needed. For example, a camera component might use any of the <a href="./../messages/common.html#MAV_COMP_ID_GIMBAL">MAV_COMP_ID_CAMERA<code>n</code></a> ids, and should not use <code>MAV_COMP_ID_GPS2</code>.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>Using type-specific component ids:</p><ul><li><strong>Tip</strong> Using type-specific component ids: - makes id clashes less likely &quot;out of the box&quot; (unless two components of the same type are present on the same system).</li><li><ul><li>reduces the impact on legacy code that determines component type from the id.</li></ul></li></ul></div><h2 id="component-capabilities" tabindex="-1">Component Capabilities <a class="header-anchor" href="#component-capabilities" aria-label="Permalink to &quot;Component Capabilities&quot;">​</a></h2><p>The basic properties and capabilities of an autopilot can be determined by requesting the <a href="./../messages/common.html#AUTOPILOT_VERSION">AUTOPILOT_VERSION</a> message using <a href="./../services/gimbal_v2.html#MAV_CMD_REQUEST_MESSAGE">MAV_CMD_REQUEST_MESSAGE</a>, and for other components by requesting <a href="./../messages/common.html#COMPONENT_INFORMATION_BASIC">COMPONENT_INFORMATION_BASIC</a>. This should normally be done on discovery of a new component, and the results cached.</p><p>The information includes hardware and software versioning information, and also the <code>capabilities</code>, a bitmap of the MAVLink services/protocols (<a href="./../messages/common.html#MAV_PROTOCOL_CAPABILITY">MAV_PROTOCOL_CAPABILITY</a>) supported by the component.</p>',27)]))}const u=t(s,[["render",i]]);export{p as __pageData,u as default};
