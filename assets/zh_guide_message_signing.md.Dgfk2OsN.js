import{_ as t}from"./chunks/packet_mavlink_v2_signing.CgrxCsRJ.js";import{_ as a,c as i,a8 as s,o as n}from"./chunks/framework.CnRC9NRC.js";const u=JSON.parse('{"title":"消息签名 (身份验证)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/message_signing.md","filePath":"zh/guide/message_signing.md"}'),o={name:"zh/guide/message_signing.md"};function c(l,e,r,p,d,h){return n(),i("div",null,e[0]||(e[0]=[s('<h1 id="消息签名-身份验证" tabindex="-1">消息签名 (身份验证) <a class="header-anchor" href="#消息签名-身份验证" aria-label="Permalink to &quot;消息签名 (身份验证)&quot;">​</a></h1><p><a href="./../guide/mavlink_2.html">MAVLink 2</a> adds support for message signing, which allows a MAVLink system to verify that messages originate from a trusted source.</p><p>本主题提供消息签名的概述, 这对于使用现有 MAVLink 库的开发人员和新的 MAVLink 代码生成器的编写者都很有用。 它解释了系统如何确定报文是否已签名、签名是否有效、如何允许接受未签名的报文以及如何创建和共享用于创建签名的 <em>secret</em>。 It explains how a system can determine if a message is signed and whether the signature is valid, how to allow unsigned messages to be accepted, and how to create and share the <em>secret</em> used to create the signature.</p><p>有关使用现有 mavlink 库的开发人员的更多详细信息, 请参见:</p><ul><li><a href="./../mavgen_c/message_signing_c.html">C Message Signing</a> (mavgen)</li><li><a href="./../mavgen_python/#message_signing">Pymavlink Message Signing</a> (mavgen)</li></ul><h2 id="帧格式" tabindex="-1">帧格式 <a class="header-anchor" href="#帧格式" aria-label="Permalink to &quot;帧格式&quot;">​</a></h2><p>For a signed packet the <strong>0x01</strong> bit of the <a href="./../guide/mavlink_2.html#incompat_flags">incompatibility flag field</a> is set true and an additional 13 bytes of &quot;signature&quot; data appended to the packet. 签名的数据包格式如下。</p><p><img src="'+t+'" alt="MAVLink 2 Signed"></p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The <a href="./../guide/mavlink_2.html#incompat_flags">incompatibility flags</a> in the packet header are used to indicate that the MAVLink library must reject the packet if it does not understand or cannot handle the flag. 换句话说, 不支持签名的 MAVLink 库必须丢弃签名的数据包。 The C library uses <a href="./../guide/mavlink_2.html#MAVLINK_IFLAG_SIGNED">MAVLINK_IFLAG_SIGNED</a> to represent the &quot;supports message signing&quot; bit.</p></div><p>签字的13字节为：</p><table tabindex="0"><thead><tr><th>数据</th><th>描述</th></tr></thead><tbody><tr><td><a href="#link_ids">linkID</a> (8&amp;nbsp;bits)</td><td>发送数据包的链接ID。 通常与<em>channel</em>相同。 Normally this is the same as the <em>channel</em>.</td></tr><tr><td><a href="#timestamps">timestamp</a> (48 bits)</td><td>2015年1月1日GMT时间以来的10个微秒时间戳。 This <em>must</em> monotonically increase for every message on a particular <a href="#link_ids">link</a>. 请注意，如果数据包平均每秒100,000多个数据包，那么时间戳可能早于实际时间。</td></tr><tr><td><a href="#signature">signature</a> (48 bits)</td><td>基于完整的数据包、时间戳和秘密密钥，数据包有48位签名。</td></tr></tbody></table><p>见下文关于字段的更多信息。</p><h3 id="link_ids" tabindex="-1">Link IDs <a class="header-anchor" href="#link_ids" aria-label="Permalink to &quot;Link IDs {#link_ids}&quot;">​</a></h3><p>提供了8位链接ID，以确保签名系统对多链接 MAVLink 系统足够强大。 每个执行都应该指定一个链接ID，指定它启用的 MAVLink 通信渠道，并将此ID置于链接ID字段中。 链接 ID 特别重要，因为不同链接（如WiFi，加上遥控无线电广播）之间可能存在巨大的潜在差异。 每个执行都应该指定一个链接ID，指定它启用的 MAVLink 通信渠道，并将此ID置于链接ID字段中。 链接 ID 特别重要，因为不同链接（如WiFi，加上遥控无线电广播）之间可能存在巨大的潜在差异。</p><p>The monotonically increasing <a href="#timestamp">timestamp</a> rule is applied separately for each logical stream, where a stream is defined by the tuple:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(系统 id、组件 id、链接 id)</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>For more information see <a href="./../mavgen_c/message_signing_c.html#handling_link_ids">C Message Signing &gt; Handling Link IDs</a>.</p></div><h3 id="signature" tabindex="-1">Signature <a class="header-anchor" href="#signature" aria-label="Permalink to &quot;Signature {#signature}&quot;">​</a></h3><p>The 48 bit (6 byte) signature is the first 48 bits of a SHA-256 hash of the complete packet (without the signature, but including the timestamp) appended to the <a href="#secret_key">secret key</a>. 密钥是 MAVLink 通道（即自动试验、地面站或 MAVLink API）两个终端储存的二进制数据的32字节。</p><p>This is shown below, where <code>+</code> represents concatenation and <code>sha256_48()</code> is a sha256 implementation which returns the first 48 bits of the normal sha256 output:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>signature = sha256_48(secret_key + header + payload + CRC + link-ID + timestamp)</span></span></code></pre></div><h2 id="timestamp" tabindex="-1">Timestamp Handling <a class="header-anchor" href="#timestamp" aria-label="Permalink to &quot;Timestamp Handling {#timestamp}&quot;">​</a></h2><p>时间戳是48位，从2015年1月1日起，单位为10微秒。 对于1/1/1970年以来可用的系统（unexpoch），你可以在 14200004 秒内使用抵消。</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>This is a loose definition, as the various update mechanisms detailed below may result in the timestamp being significantly different from actual GMT time.</p></div><p>All timestamps generated must be at least 1 more than the previous timestamp sent in the same session for the same link/<code>(SystemID, ComponentID, LinkID)</code> tuple. 如果数据包以每秒100 000多包的速度破裂，时间戳可能提前 GMT 时间。</p><p>MAVLink 启用的设备可能不知道当前的 GMT 时间，例如，如果没有可靠的时间源，或者，如果它刚刚启动，并且尚未从GPS 或其他系统中获得时间。</p><p>系统应当执行以下规则，以获得可靠的时间戳：</p><ul><li><p>当前时间戳应定期储存在持久性储存中(最好至少每分钟一次)</p></li><li><p>启动时使用的时间戳应该是系统时钟和存储时间戳所隐含的时间戳的最大值</p></li><li><p>如果该系统没有一个 RTC 机制，则应当更新其在全球定位系统锁定时时的时间戳。 应该使用全球定位系统和存储时间戳的最大时间戳。 应该使用全球定位系统和存储时间戳的最大时间戳。</p></li><li><p>从特定链接发送的每个消息中，时间戳应增加一个。</p></li><li><p>When a correctly signed message is decoded the timestamp should be replaced by the timestamp of the incoming message if that timestamp is greater than the current timestamp.</p><div class="note custom-block github-alert"><p class="custom-block-title">&gt; The link timestamp must never be updated with the timestamp from an incorrectly signed packet (even if these are being [accepted](#accepting_incorrectly_signed_packets)).</p><p></p></div></li><li><p>The timestamp on incoming signed messages should be checked against the previous timestamp for the incoming <code>(linkID,srcSystem,SrcComponent)</code> tuple and the message rejected if it is smaller.</p></li><li><p>If there is no previous message with the given <code>(linkID,srcSystem,SrcComponent)</code> then the timestamp should be accepted if it not more than 6 million (one minute) behind the current timestamp.</p></li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>For devices that store the timestamp in persistent storage, implementations can prevent race conditions by storing two timestamp values. 在写入时, 应更新两个值中较小的值。 在读取时, 应使用两个值中较大的值。</p></div><h2 id="accept_signed_packets" tabindex="-1">Accepting Signed Packets <a class="header-anchor" href="#accept_signed_packets" aria-label="Permalink to &quot;Accepting Signed Packets {#accept_signed_packets}&quot;">​</a></h2><p>当签名的数据包到达时, 如果出现以下情况, 则应将其丢弃:</p><ul><li>Timestamp is older than the previous packet from the same logical stream - where a logical stream is defined as the sequence of MAVLink packets with the same (<code>SystemID</code>, <code>ComponentID</code>, <code>LinkID</code>) tuple.</li><li>计算的48位签名与数据包中包含的签名不匹配。</li><li>时间戳在本地系统的时间戳后面超过 1分钟 (6, 000, 000)。</li></ul><h2 id="accepting_unsigned_packets" tabindex="-1">Accepting Unsigned Packets <a class="header-anchor" href="#accepting_unsigned_packets" aria-label="Permalink to &quot;Accepting Unsigned Packets {#accepting_unsigned_packets}&quot;">​</a></h2><p>MAVLink libraries should provide a mechanism that allows a system to conditionally accept <em>unsigned</em> packets.</p><p>接受这些数据包的规则将是特定于实现的, 但可以基于参数设置、传输类型、消息类型、(in) 兼容性标志等的组合。</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>All packets that do not meet the system-specific unsigned packet acceptance rules must be rejected (otherwise there is no benefit gained from signing/authentication).</p></div><p>关于何时接受未签名数据包的一些建议:</p><ul><li>接受基于系统特定参数的所有未签名数据包。</li><li>如果连接是通过 &quot;安全通道&quot; (例如本地 usb 电缆或本地有线以太网电缆), 则接受所有未签名的数据包。</li><li><code>RADIO_STATUS</code> packets are always accepted without signing (to make life easier for telemetry radios).</li><li>在 &quot;无签名模式&quot; (可能由启动时按下的硬件按钮触发) 时接受所有未签名的数据包。</li><li>接受所有未签名的数据包, 直到 (无条件地) 收到已签名的数据包, 然后移动到上面更受限制的签名规则。</li></ul><h2 id="accepting_incorrectly_signed_packets" tabindex="-1">Accepting Incorrectly Signed Packets <a class="header-anchor" href="#accepting_incorrectly_signed_packets" aria-label="Permalink to &quot;Accepting Incorrectly Signed Packets {#accepting_incorrectly_signed_packets}&quot;">​</a></h2><p>MAVLink 库应该提供一种机制, 允许系统有条件地接受签名不正确的数据包。</p><p>此功能可能有助于查找带有损坏的密钥的失联飞机 (gcs 可以选择仍然显示位置信息, 尽管理想情况下使用不同的 &quot;不受信任&quot; 图标)。</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>A system that is accepting incorrectly signed packets should provide a highly conspicuous indication that the connection is <em>unsafe</em>/<em>insecure</em>. 格式错误的签名数据包表示配置错误、传输失败、协议失败或恶意操作。</p></div><h2 id="secret_key" tabindex="-1">Secret Key Management <a class="header-anchor" href="#secret_key" aria-label="Permalink to &quot;Secret Key Management {#secret_key}&quot;">​</a></h2><p>密钥是32字节的二进制数据, 用于创建可由密钥的其他持有者验证的消息签名。 密钥应在网络中的一个系统 (通常是 GCS) 上创建, 并通过安全通道共享到其他受信任的设备。 系统必须具有共享密钥才能进行通信。 密钥应在网络中的一个系统 (通常是 GCS) 上创建, 并通过安全通道共享到其他受信任的设备。 系统必须具有共享密钥才能进行通信。</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The <em>mavgen</em> <a href="./../mavgen_c/message_signing_c.html">C</a> and <a href="./../mavgen_python/#message_signing">Python</a> libraries support only one key per link. 这是库的选择, 而不是协议的限制/要求。 相反, 实现可以存储一个密钥池, 并/或在每个连接的基础上管理密钥。</p></div><p>密钥应存储在持久存储设备中, 并且不得通过任何可公开访问的通信协议公开。 密钥应存储在持久存储设备中, 并且不得通过任何可公开访问的通信协议公开。 特别是, 密钥不得在可以用于公共日志分析的 MAVLink 参数、MAVLink 日志文件或数据闪存日志文件中公开。</p><p>生成密钥的方法取决于实现。 例如, 它可以通过以下方式生成:</p><ul><li>用户输入的字符串, 然后通过 sha-256 运行。</li><li>随机密钥生成器。</li></ul><p>The secret key may be shared to other devices using the <a href="./../messages/common.html#SETUP_SIGNING">SETUP_SIGNING</a> message. The message should only ever be sent over a secure link (e.g. USB or wired Ethernet) as a direct message to each connected <code>system_id</code>/<code>component_id</code>. 必须设置接收系统来处理消息, 并将接收到的密钥存储到相应的永久存储中。</p><p>The same secure method can be used to both <em>set</em> and <em>reset</em> a system&#39;s key (reseting a key does not have to be &quot;more secure&quot; than setting it in the first place).</p><p>The <code>SETUP_SIGNING</code> message should never be broadcast, and received <code>SETUP_SIGNING</code> messages must never be automatically forwarded to other active MAVLink devices/streams/channels. 这是为了避免通过安全链接 (如 usb) 收到的密钥通过不安全的链接 (例如 wifi) 自动转发到另一个系统的情况。</p><p>不通过 USB 提供 MAVLink 的自动驾驶仪可能会创建一个模块, 可以从命令行界面 (例如 nsh) 设置密钥。</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>We recommend that GCS implementations should generate the secret key and share this with connected systems over a secure link (e.g. USB). The receiving system may be configured to ignore message signatures on the secure channel (i.e. accept all <a href="#accept_signed_packets">signed</a>, <a href="#accepting_unsigned_packets">unsigned</a> or <a href="#accepting_incorrectly_signed_packets">incorrectly signed</a> packets), so that it is possible to reset a key that has been lost or corrupted.</p></div><h2 id="日志记录" tabindex="-1">日志记录 <a class="header-anchor" href="#日志记录" aria-label="Permalink to &quot;日志记录&quot;">​</a></h2><p>In order to avoid leaking the secret key used for signing, systems should omit <a href="./../messages/common.html#SETUP_SIGNING">SETUP_SIGNING</a> messages from logs (or replace the secret with 32 0xFF bytes in the logged message).</p><p>Similarly, signed packets should have the signature <a href="./../guide/mavlink_2.html#incompat_flags">incompatibility bit</a> cleared and the signature block removed before being put into telemetry log files. 这使得潜在攻击者更难以收集大量签名数据来攻击系统。</p><h2 id="更多信息" tabindex="-1">更多信息 <a class="header-anchor" href="#更多信息" aria-label="Permalink to &quot;更多信息&quot;">​</a></h2><p>The <a href="https://docs.google.com/document/d/1ETle6qQRcaNWAmpG2wz0oOpFKSF_bcTmYMQvtTGI8ns/edit?usp=sharing" target="_blank" rel="noreferrer">Message Signing Proposal</a> contains additional information, including:</p><ul><li>设计决定背后的原因。</li><li>评价安全效力，包括抵制重播和脱机攻击。</li><li>假设。</li></ul><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Much of this content is derived from the <a href="https://docs.google.com/document/d/1ETle6qQRcaNWAmpG2wz0oOpFKSF_bcTmYMQvtTGI8ns/edit?usp=sharing" target="_blank" rel="noreferrer">Message Signing Proposal</a> (Google Doc).</p></div>',60)]))}const k=a(o,[["render",c]]);export{u as __pageData,k as default};
