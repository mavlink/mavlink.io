import{_ as a,c as t,a8 as i,o}from"./chunks/framework.CnRC9NRC.js";const b=JSON.parse('{"title":"Gimbal Protocol (v2)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/services/gimbal_v2.md","filePath":"zh/services/gimbal_v2.md"}'),s={name:"zh/services/gimbal_v2.md"};function l(n,e,m,r,d,c){return o(),t("div",null,e[0]||(e[0]=[i('<h1 id="gimbal-protocol-v2" tabindex="-1">Gimbal Protocol (v2) <a class="header-anchor" href="#gimbal-protocol-v2" aria-label="Permalink to &quot;Gimbal Protocol (v2)&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>This version supersedes <a href="./../services/gimbal.html">Gimbal Protocol v1</a> Existing functionality is now fixed, but compatible changes may still be added.</p></div><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>The gimbal protocol allows MAVLink control over the attitude/orientation of cameras (or other sensors) mounted on the drone. The orientation can be: controlled by the pilot in real time (e.g. using a joystick from a ground station), set as part of a mission, or moved based on camera tracking.</p><p>The protocol also defines what status information is published for developers, configurators, as well as users of the drone. It additionally provides ways to assign control to different sources.</p><p>The protocol supports a number of hardware setups, and enables gimbals with varying capabilities.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The original protocol design document <a href="https://docs.google.com/document/d/16pekKRXLN2FhlL9YNFP983cjfBKAsDwN0gOSks8USo4/edit?usp=sharing" target="_blank" rel="noreferrer">can be found here</a>.</p></div><h2 id="concepts" tabindex="-1">Concepts <a class="header-anchor" href="#concepts" aria-label="Permalink to &quot;Concepts&quot;">​</a></h2><h3 id="gimbal-manager-and-gimbal-device" tabindex="-1">Gimbal Manager and Gimbal Device <a class="header-anchor" href="#gimbal-manager-and-gimbal-device" aria-label="Permalink to &quot;Gimbal Manager and Gimbal Device&quot;">​</a></h3><p>To accommodate gimbals with varying capabilities, and various hardware setups, &quot;a gimbal&quot; is conceptually split into two parts:</p><ul><li><strong>Gimbal Device:</strong> the actual gimbal device, hardware and software.</li><li><strong>Gimbal Manager:</strong> software to deconflict gimbal messages and commands from different sources, and to abstract the capabilities of the <strong>Gimbal Device</strong> from gimbal users.</li></ul><p>The <em>Gimbal Manager</em> and <em>Gimbal Device</em> expose respective <em>message sets</em> that can be used for: gimbal manager/device discovery, querying capabilities, publishing status, and various types of orientation/attitude control.</p><p>The key concept to understand is that a <em>Gimbal Manager</em> has a 1:1 relationship with a particular <em>Gimbal Device</em>, and is the only party on the MAVLink network that is allowed to directly command that device - it does so using the <em>Gimbal Device message set</em>.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The <em>Gimbal Device</em> must act only upon messages that come from the associated <em>Gimbal Manager</em>! The device will however <em>broadcast</em> its status to all parties on the network (not just its manager).</p></div><p>MAVLink applications (ground stations, developer APIs like the MAVSDK, etc.), and any other software that wants to control a particular gimbal, must do so via its <em>Gimbal Manager</em>, using the <em>Gimbal Manager message set</em>.</p><p>Note that the gimbal manager is (by default) implemented on the autopilot.</p><h3 id="common-set-ups" tabindex="-1">Common Set-ups <a class="header-anchor" href="#common-set-ups" aria-label="Permalink to &quot;Common Set-ups&quot;">​</a></h3><p>This section outlines the three most common hardware set-ups.</p><h4 id="simple-gimbal-directly-connected-to-autopilot" tabindex="-1">Simple Gimbal Directly Connected to Autopilot <a class="header-anchor" href="#simple-gimbal-directly-connected-to-autopilot" aria-label="Permalink to &quot;Simple Gimbal Directly Connected to Autopilot&quot;">​</a></h4><p>In this (default) set-up the autopilot takes the role of the gimbal manager.</p><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggTFJcblx0YXBbXCJBdXRvcGlsb3QgKEdpbWJhbCBNYW5hZ2VyKVwiXVxuXHRnW1wiR2ltYmFsIERldmljZVwiXVxuXHRnY3NbXCJHcm91bmQgU3RhdGlvblwiXVxuXHRhcCAtLS18XCJHaW1iYWwgZGV2aWNlIG1lc3NhZ2VzXCJ8IGdcblx0Z2NzIC0tLXxcIkdpbWJhbCBtYW5hZ2VyIG1lc3NhZ2VzXCJ8IGFwIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifSwidXBkYXRlRWRpdG9yIjpmYWxzZX0" target="_blank" rel="noreferrer"><img src="https://mermaid.ink/img/eyJjb2RlIjoiZ3JhcGggTFJcblx0YXBbXCJBdXRvcGlsb3QgKEdpbWJhbCBNYW5hZ2VyKVwiXVxuXHRnW1wiR2ltYmFsIERldmljZVwiXVxuXHRnY3NbXCJHcm91bmQgU3RhdGlvblwiXVxuXHRhcCAtLS18XCJHaW1iYWwgZGV2aWNlIG1lc3NhZ2VzXCJ8IGdcblx0Z2NzIC0tLXxcIkdpbWJhbCBtYW5hZ2VyIG1lc3NhZ2VzXCJ8IGFwIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifSwidXBkYXRlRWRpdG9yIjpmYWxzZX0" alt=""></a></p><h4 id="standalone-integrated-camera-gimbal" tabindex="-1">Standalone Integrated Camera/Gimbal <a class="header-anchor" href="#standalone-integrated-camera-gimbal" aria-label="Permalink to &quot;Standalone Integrated Camera/Gimbal&quot;">​</a></h4><p>In this set-up the integrated camera/gimbal itself can be the <em>Gimbal Manager</em>.</p><p>Therefore, the gimbal device interface is internal (no implementation is required).</p><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggTFJcblx0YXBbXCJBdXRvcGlsb3RcIl1cblx0Z1tcIkNhbWVyYSAvIEdpbWJhbCAoR2ltYmFsIE1hbmFnZXIpXCJdXG5cdGdjc1tcIkdyb3VuZCBTdGF0aW9uXCJdXG5cdGFwIC0tLXxcIkdpbWJhbCBtYW5hZ2VyIG1lc3NhZ2VzXCJ8IGdcblx0Z2NzIC0tLXxcIkdpbWJhbCBtYW5hZ2VyIG1lc3NhZ2VzXCJ8ZyIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9" target="_blank" rel="noreferrer"><img src="https://mermaid.ink/img/eyJjb2RlIjoiZ3JhcGggTFJcblx0YXBbXCJBdXRvcGlsb3RcIl1cblx0Z1tcIkNhbWVyYSAvIEdpbWJhbCAoR2ltYmFsIE1hbmFnZXIpXCJdXG5cdGdjc1tcIkdyb3VuZCBTdGF0aW9uXCJdXG5cdGFwIC0tLXxcIkdpbWJhbCBtYW5hZ2VyIG1lc3NhZ2VzXCJ8IGdcblx0Z2NzIC0tLXxcIkdpbWJhbCBtYW5hZ2VyIG1lc3NhZ2VzXCJ8ZyIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9" alt=""></a></p><h4 id="onboard-computer-with-camera-and-gimbal-connected-to-autopilot" tabindex="-1">Onboard Computer with Camera and Gimbal Connected to Autopilot <a class="header-anchor" href="#onboard-computer-with-camera-and-gimbal-connected-to-autopilot" aria-label="Permalink to &quot;Onboard Computer with Camera and Gimbal Connected to Autopilot&quot;">​</a></h4><p>In this set-up the <em>Gimbal Manager</em> can be on the onboard computer.</p><p>Commands from the GCS (etc.) are sent to the <em>Gimbal Manager</em> on the companion computer. Messages from the <em>Gimbal Manager</em> to the <em>Gimbal Device</em> need to be sent to/routed through the autopilot.</p><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggTFJcblx0YXBbXCJBdXRvcGlsb3RcIl1cblx0Y2NbXCJDb21wYW5pb24gKEdpbWJhbCBNYW5hZ2VyKVwiXVxuXHRnW1wiR2ltYmFsIERldmljZVwiXVxuXHRnY3NbXCJHcm91bmQgU3RhdGlvblwiXVxuXHRhcCAtLS18XCJHaW1iYWwgZGV2aWNlIG1lc3NhZ2VzXCJ8Z1xuXHRhcCAtLS18XCJHaW1iYWwgZGV2aWNlIG1lc3NhZ2VzXCJ8Y2Ncblx0Z2NzIC0tLXxcIkdpbWJhbCBtYW5hZ2VyIG1lc3NhZ2VzXCJ8Y2MiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ" target="_blank" rel="noreferrer"><img src="https://mermaid.ink/img/eyJjb2RlIjoiZ3JhcGggTFJcblx0YXBbXCJBdXRvcGlsb3RcIl1cblx0Y2NbXCJDb21wYW5pb24gKEdpbWJhbCBNYW5hZ2VyKVwiXVxuXHRnW1wiR2ltYmFsIERldmljZVwiXVxuXHRnY3NbXCJHcm91bmQgU3RhdGlvblwiXVxuXHRhcCAtLS18XCJHaW1iYWwgZGV2aWNlIG1lc3NhZ2VzXCJ8Z1xuXHRhcCAtLS18XCJHaW1iYWwgZGV2aWNlIG1lc3NhZ2VzXCJ8Y2Ncblx0Z2NzIC0tLXxcIkdpbWJhbCBtYW5hZ2VyIG1lc3NhZ2VzXCJ8Y2MiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ" alt=""></a></p><h3 id="multiple-gimbals" tabindex="-1">Multiple Gimbals <a class="header-anchor" href="#multiple-gimbals" aria-label="Permalink to &quot;Multiple Gimbals&quot;">​</a></h3><p>Multiple gimbals per drone are supported.</p><h4 id="component-ids" tabindex="-1">Component IDs <a class="header-anchor" href="#component-ids" aria-label="Permalink to &quot;Component IDs&quot;">​</a></h4><p>Multiple component IDs are reserved for MAVLink gimbal devices: <code>MAV_COMP_ID_GIMBAL</code>, <code>MAV_COMP_ID_GIMBAL2</code>, <code>MAV_COMP_ID_GIMBAL3</code>, <code>MAV_COMP_ID_GIMBAL4</code>, <code>MAV_COMP_ID_GIMBAL5</code>, <code>MAV_COMP_ID_GIMBAL6</code>.</p><p>The listed component IDs should be used where possible. Ids <code>0-6</code> may not be used. Other ids may be used as long as the <a href="./../messages/common.html#MAV_TYPE">MAV_TYPE</a> is correctly set to <a href="./../messages/common.html#MAV_TYPE_GIMBAL">MAV_TYPE_GIMBAL</a>.</p><h4 id="mapping-from-gimbal-managers-to-gimbal-devices" tabindex="-1">Mapping from Gimbal Managers to Gimbal Devices <a class="header-anchor" href="#mapping-from-gimbal-managers-to-gimbal-devices" aria-label="Permalink to &quot;Mapping from Gimbal Managers to Gimbal Devices&quot;">​</a></h4><p>Every <em>Gimbal Manager</em> has a single associated <em>Gimbal Device</em> that it controls (there is a 1:1 relationship). A particular MAVLink component, such as an autopilot, can implement multiple gimbal managers in order to control two or more gimbal devices. The identity of a gimbal device and its associated manager, are represented by a &quot;gimbal device id&quot;. This id is used to differentiate messages from different gimbal managers, and also to target a particular gimbal in commands/messages sent to the component that is hosting its gimbal manager.</p><p>A <em>Gimbal Manager</em> publishes the id of its associated device in the <code>gimbal_device_id</code> field of the <a href="#GIMBAL_MANAGER_INFORMATION">GIMBAL_MANAGER_INFORMATION</a> message (this same field name is present in all gimbal manager messages so you can identify the source). Similarly, commands that can be sent to a gimbal manager include a parameter with label <code>Gimbal device ID</code> that indicates the particular gimbal manager (and device).</p><ul><li>A system that wants to control a <em>particular</em> gimbal device will send messages to the component that has the manager(s), such as an autopilot, specifying the device id of the gimbal to be controlled.</li><li>A system that wants to control <em>all</em> gimbal devices managed by gimbal managers on a particular component, would send the command/message to that component and set the device id to <code>0</code>.</li></ul><h4 id="gimbal_device_addressing" tabindex="-1">Addressing of Gimbal MAVLink Devices <a class="header-anchor" href="#gimbal_device_addressing" aria-label="Permalink to &quot;Addressing of Gimbal MAVLink Devices {#gimbal_device_addressing}&quot;">​</a></h4><p>For MAVLink gimbal devices the gimbal device id (<code>gimbal_device_id</code>) is the MAVLink <a href="#component-ids">component ID of the gimbal device</a> controlled by the gimbal manager.</p><p>The gimbal manager processes commands for its associated device, sending appropriate/corresponding <em>gimbal device commands</em> to the MAVLink gimbal device.</p><h4 id="non_mavlink_gimbal_device_addressing" tabindex="-1">Addressing of non-MAVLink gimbal devices <a class="header-anchor" href="#non_mavlink_gimbal_device_addressing" aria-label="Permalink to &quot;Addressing of non-MAVLink gimbal devices {#non_mavlink_gimbal_device_addressing}&quot;">​</a></h4><p>Non-MAVLink gimbal devices are gimbals that don&#39;t expose a MAVLink Gimbal Device (or manager) API, but instead are connected to the gimbal manager using some other protocol. For instance, this could be a PWM gimbal connected to an autopilot. Since the gimbal device is not a MAVLink component, it does not have a unique MAVLink component ID that can be used for the gimbal device id. Therefore you either have to make it into a MAVLink component (so it has an id) or assign it a particular non-MAVLink id.</p><p>Autopilots are expected to implement gimbal managers for each attached gimbal and assign each a unique gimbal device id between <code>1</code> and <code>6</code> (which is why these values can&#39;t be used as MAVLink component IDs for gimbal devices). This id would then be used in gimbal manager messages sent by the autopilot, and for addressing the particular gimbal in commands. The autopilot would directly control attached gimbals in response to gimbal manager commands. In addition to sending <em>gimbal manager messages</em> when appropriate, it should also send/stream required <em>gimbal device messages</em>, such as <a href="#GIMBAL_DEVICE_ATTITUDE_STATUS">GIMBAL_DEVICE_ATTITUDE_STATUS</a>.</p><p>All other hardware with attached gimbal devices, such as a companion computers, are expected to implement them as separate MAVLink components, with their own MAVLink component ID that can be used for addressing. For example, a companion computer with an attached gimbal would appear as two MAVLink components: a companion computer and a gimbal. The gimbal component would identify as a type <code>MAV_TYPE_GIMBAL</code> and assert that it implements the gimbal manager protocol. As with autopilot-attached cameras it would need to respond as a gimbal manager, and also stream required gimbal device messages.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Implementing each attached camera as a separate MAVLink component allows cameras attached to a companion computer to be separately addressed in missions executed on the autopilot.</p></div><h2 id="implementation-and-messages" tabindex="-1">Implementation and Messages <a class="header-anchor" href="#implementation-and-messages" aria-label="Permalink to &quot;Implementation and Messages&quot;">​</a></h2><h3 id="messages-between-ground-station-and-gimbal-manager" tabindex="-1">Messages between Ground Station and Gimbal Manager <a class="header-anchor" href="#messages-between-ground-station-and-gimbal-manager" aria-label="Permalink to &quot;Messages between Ground Station and Gimbal Manager&quot;">​</a></h3><h4 id="discovery-of-gimbal-manager" tabindex="-1">Discovery of Gimbal Manager <a class="header-anchor" href="#discovery-of-gimbal-manager" aria-label="Permalink to &quot;Discovery of Gimbal Manager&quot;">​</a></h4><p>A ground station should monitor for <code>HEARTBEAT</code> messages from all new components and check their capabilities by requesting <a href="./../messages/common.html#AUTOPILOT_VERSION">AUTOPILOT_VERSION</a> for autopilots and <a href="./../messages/common.html#COMPONENT_INFORMATION_BASIC">COMPONENT_INFORMATION_BASIC</a> for other components (see <a href="./../services/heartbeat.html">HEARTBEAT/Connection protocol</a>).</p><p>If the <code>capabilities</code> field of the above message(s) has the flag <a href="./../messages/common.html#MAV_PROTOCOL_CAPABILITY_COMPONENT_IMPLEMENTS_GIMBAL_MANAGER">MAV_PROTOCOL_CAPABILITY_COMPONENT_IMPLEMENTS_GIMBAL_MANAGER</a> set:</p><ul><li>GCS should send a <a href="#MAV_CMD_REQUEST_MESSAGE">MAV_CMD_REQUEST_MESSAGE</a> to the component for <a href="#GIMBAL_MANAGER_INFORMATION">GIMBAL_MANAGER_INFORMATION</a>.</li><li>Component should respond by emitting a <code>GIMBAL_MANAGER_INFORMATION</code> message for each gimbal manager that it implements.</li></ul><p>The <code>GIMBAL_MANAGER_INFORMATION</code> contains important information a particular gimbal, such as its capabilities (<a href="#GIMBAL_MANAGER_CAP_FLAGS">GIMBAL_MANAGER_CAP_FLAGS</a>), maximum angles and angle rates, as well as the <code>gimbal_device_id</code> which identifies the specific gimbal device controlled by a particular <em>Gimbal Manager</em>.</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>A GCS should always request <code>GIMBAL_MANAGER_INFORMATION</code> from autopilot components prior to: PX4 v1.16, ArduPilot-4.5 (when the protocol bit was added).</p></div><h4 id="gimbal-manager-status" tabindex="-1">Gimbal Manager Status <a class="header-anchor" href="#gimbal-manager-status" aria-label="Permalink to &quot;Gimbal Manager Status&quot;">​</a></h4><p>A <em>Gimbal Manager</em> should send out <a href="#GIMBAL_MANAGER_STATUS">GIMBAL_MANAGER_STATUS</a> at a low regular rate (e.g. 5 Hz) to inform the ground station about its status.</p><h3 id="starting-configuring-gimbal-control" tabindex="-1">Starting / Configuring Gimbal Control <a class="header-anchor" href="#starting-configuring-gimbal-control" aria-label="Permalink to &quot;Starting / Configuring Gimbal Control&quot;">​</a></h3><p>It is possible for multiple components to want to control a gimbal at the same time, e.g.: a ground station, a companion computer, or the autopilot running a mission.</p><p>In order to start controlling a gimbal, a component first needs to send the <a href="#MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE">MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE</a> command. This allows setting which MAVLink component (set by system ID and component ID) is in primary control and which one is in secondary control. The gimbal manager is to ignore any gimbal controls which come from MAVLink components that are not explicity set to &quot;in control&quot;. This should prevent conflicts between various inputs as long as all components are fair/co-operative when using the configure command.</p><p>To be co-operative entails the following rules:</p><ul><li>Don&#39;t send the configure manager configure command continuously but only once to initiate and once to stop control again.</li><li>Check the <a href="#GIMBAL_MANAGER_STATUS">GIMBAL_MANAGER_STATUS</a> about who is in control first and - if possible - warn user about planned action. For example, if the autopilot is in control of the gimbal as part of a mission, the ground station should ask the user first (i.e. via a pop-up) if they really want to take over manual control.</li><li>Don&#39;t forget to release control when an action/task is finished and set the sysid/compid to 0.</li></ul><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>It is possible to assign control to another component too, not just to itself. For example, a smart shot running on a companion computer can set itself to be in primary control but assign a ground station for secondary control to e.g. nudge during the smart shot.</p></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The implementation of how primary and secondary control are combined or mixed is not defined by the protocol but up to the implementation. This allows flexibility for different use cases.</p></div><h4 id="manual-gimbal-control-using-mavlink" tabindex="-1">Manual Gimbal Control using MAVLink <a class="header-anchor" href="#manual-gimbal-control-using-mavlink" aria-label="Permalink to &quot;Manual Gimbal Control using MAVLink&quot;">​</a></h4><p>A ground station can manually control a gimbal by sending <a href="#GIMBAL_MANAGER_SET_MANUAL_CONTROL">GIMBAL_MANAGER_SET_MANUAL_CONTROL</a>. This allows controlling the gimbal with either angles, or angular rates, using a normalized unit (-1..1). The gimbal device is responsible for translating the input based on angle, speed, and &quot;smoothness&quot; settings.</p><p>This input can additionally be scaled by the gimbal manager depending on its state. For example, if the gimbal manager is on a camera and knows the current zoom level / focal length of the camera, it can scale the angular rate down to support smooth paning and tilting.</p><h4 id="controlling-gimbal-angle-and-or-angular-rate-using-mavlink" tabindex="-1">Controlling Gimbal Angle and/or Angular Rate using MAVLink <a class="header-anchor" href="#controlling-gimbal-angle-and-or-angular-rate-using-mavlink" aria-label="Permalink to &quot;Controlling Gimbal Angle and/or Angular Rate using MAVLink&quot;">​</a></h4><p>A ground station, companion computer, or other MAVLink component can set the gimbal angle and/or angular rates using the messages <a href="#GIMBAL_MANAGER_SET_ATTITUDE">GIMBAL_MANAGER_SET_ATTITUDE</a> or <a href="#GIMBAL_MANAGER_SET_PITCHYAW">GIMBAL_MANAGER_SET_PITCHYAW</a>.</p><h3 id="messages-between-gimbal-manager-and-gimbal-device" tabindex="-1">Messages between Gimbal Manager and Gimbal Device <a class="header-anchor" href="#messages-between-gimbal-manager-and-gimbal-device" aria-label="Permalink to &quot;Messages between Gimbal Manager and Gimbal Device&quot;">​</a></h3><h4 id="discovery-of-gimbal-device" tabindex="-1">Discovery of Gimbal Device <a class="header-anchor" href="#discovery-of-gimbal-device" aria-label="Permalink to &quot;Discovery of Gimbal Device&quot;">​</a></h4><p>The MAVlink node where the <em>Gimbal Manager</em> is implemented needs to discover <em>Gimbal Devices</em> by sending a broadcast <a href="#MAV_CMD_REQUEST_MESSAGE_2">MAV_CMD_REQUEST_MESSAGE</a> for <a href="#GIMBAL_DEVICE_INFORMATION">GIMBAL_DEVICE_INFORMATION</a>. Every gimbal device should respond with <code>GIMBAL_DEVICE_INFORMATION</code>.</p><p>The MAVLink node should then create as many <em>Gimbal Manager</em> instances as <em>Gimbal Devices</em> found.</p><h4 id="control-of-a-gimbal-device" tabindex="-1">Control of a Gimbal Device <a class="header-anchor" href="#control-of-a-gimbal-device" aria-label="Permalink to &quot;Control of a Gimbal Device&quot;">​</a></h4><p>To control the angle and/or angular rate of the <em>Gimbal Device</em>, use the message <a href="#GIMBAL_DEVICE_SET_ATTITUDE">GIMBAL_DEVICE_SET_ATTITUDE</a>. If the gimbal manager has multiple gimbal control inputs available it should deconflict them as explained below.</p><h4 id="autopilot-state-for-gimbal-device" tabindex="-1">Autopilot State for Gimbal Device <a class="header-anchor" href="#autopilot-state-for-gimbal-device" aria-label="Permalink to &quot;Autopilot State for Gimbal Device&quot;">​</a></h4><p>The autopilot should also send the message <a href="#AUTOPILOT_STATE_FOR_GIMBAL_DEVICE">AUTOPILOT_STATE_FOR_GIMBAL_DEVICE</a> to the gimbal device. This data is required by the <em>Gimbal Device</em> attitude estimator (horizon compensation), as well as to anticipate the vehicle&#39;s movements (e.g. the feed forward angular velocity in z-axis, so the current yaw intention).</p><h3 id="gimbal-device-broadcast-status-messages" tabindex="-1">Gimbal Device Broadcast/Status Messages <a class="header-anchor" href="#gimbal-device-broadcast-status-messages" aria-label="Permalink to &quot;Gimbal Device Broadcast/Status Messages&quot;">​</a></h3><p>The gimbal device should send out its attitude and status in <a href="#GIMBAL_DEVICE_ATTITUDE_STATUS">GIMBAL_DEVICE_ATTITUDE_STATUS</a> at a regular rate, e.g. 10 Hz.</p><p>This message is a meant as broadcast, so it&#39;s set to the GCS, <em>Gimbal Manager</em>, and all parties on the network (not just <em>Gimbal Manager</em>, like all other messages).</p><h3 id="custom-gimbal-device-settings" tabindex="-1">Custom Gimbal Device Settings <a class="header-anchor" href="#custom-gimbal-device-settings" aria-label="Permalink to &quot;Custom Gimbal Device Settings&quot;">​</a></h3><p>Custom gimbal settings can be accomplished using the component information microservice which is based on a <a href="./../services/component_information.html">component information file</a> (this is similar to the <a href="./../services/camera_def.html">camera definition file</a>).</p><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h2><h4 id="how-to-set-the-system-id-of-a-gimbal-device" tabindex="-1">How to set the System ID of a gimbal device? <a class="header-anchor" href="#how-to-set-the-system-id-of-a-gimbal-device" aria-label="Permalink to &quot;How to set the System ID of a gimbal device?&quot;">​</a></h4><p>The system ID of all components (e.g. autopilot, companion computer, camera, gimbal) on a drone/system must be the same. This needs to be either done manually by configuration, or alternatively, the components need to listen to the heartbeat of the autopilot and then adjust their system ID accordingly.</p><h4 id="when-is-gimbal-device-also-a-gimbal-manager" tabindex="-1">When is Gimbal Device also a Gimbal Manager? <a class="header-anchor" href="#when-is-gimbal-device-also-a-gimbal-manager" aria-label="Permalink to &quot;When is Gimbal Device also a Gimbal Manager?&quot;">​</a></h4><p>The default case should be to use the <em>Gimbal Manager</em> in the autopilot. The only exception to this are integrated solutions containing a camera and gimbal for functionality like visual tracking.</p><h4 id="how-to-test-gimbal-device" tabindex="-1">How to test Gimbal Device? <a class="header-anchor" href="#how-to-test-gimbal-device" aria-label="Permalink to &quot;How to test Gimbal Device?&quot;">​</a></h4><p>A <em>Gimbal Device</em> can be tested by connecting it to an autopilot with a <em>Gimbal Manager</em>. To avoid having to do a full setup including autopilot, a <a href="https://github.com/mavlink/MAVSDK/tree/develop/examples/gimbal_device_tester" target="_blank" rel="noreferrer">direct test using MAVSDK</a> is available.</p><h4 id="how-to-control-a-gimbal-with-the-old-mavlink-protocol" tabindex="-1">How to control a gimbal with the old MAVLink protocol? <a class="header-anchor" href="#how-to-control-a-gimbal-with-the-old-mavlink-protocol" aria-label="Permalink to &quot;How to control a gimbal with the old MAVLink protocol?&quot;">​</a></h4><p>Gimbals that use the (old) <a href="./../services/gimbal.html">Gimbal Protocol v1</a> should still be supported by autopilot software. Basically, the <em>Gimbal Manager</em> needs to translate the commands to the old protocol.</p><h4 id="how-to-control-a-gimbal-without-mavlink-support" tabindex="-1">How to control a gimbal without MAVLink support? <a class="header-anchor" href="#how-to-control-a-gimbal-without-mavlink-support" aria-label="Permalink to &quot;How to control a gimbal without MAVLink support?&quot;">​</a></h4><p>Gimbals controlled using a protocol like PPM, PWM, SBUS or something proprietary can still be supported. The autopilot will have to act as the <em>Gimbal Manager</em> and provide the driver and translation to the respective protocol.</p><h4 id="what-about-rc-non-mavlink-control" tabindex="-1">What about RC (non-MAVLink) control? <a class="header-anchor" href="#what-about-rc-non-mavlink-control" aria-label="Permalink to &quot;What about RC (non-MAVLink) control?&quot;">​</a></h4><p>The autopilot needs to be configured to either accept MAVLink input (so <a href="#GIMBAL_MANAGER_SET_MANUAL_CONTROL">GIMBAL_MANAGER_SET_MANUAL_CONTROL</a>) or RC control. In both cases, the autopilot can then calculate a gimbal angle or angular rate from the manual control input and send the resulting setpoint to the gimbal device.</p><p>For RC control, the channels will have to be manually mapped/configured to control the gimbal. This is the same approach as is used for managing the input source for flying; it is up to the implementation to select either RC or MAVLink. The recommendation is to make it configurable using (for instance) a parameter.</p><h4 id="non-mavlink-gimbals" tabindex="-1">Non-MAVLink gimbals <a class="header-anchor" href="#non-mavlink-gimbals" aria-label="Permalink to &quot;Non-MAVLink gimbals&quot;">​</a></h4><p>A non-MAVLink gimbal needs to be connected to a gimbal manager, which then takes care of sending the gimbal device messages. Since a non-MAVLink gimbal can&#39;t be addressed with a MAVLink component ID, the <code>gimbal_device_id</code> needs to be set to one of the magic values (1 to 6). This signals that the gimbal manager also is also acting as the gimbal device.</p><p>Also see <a href="#non_mavlink_gimbal_device_addressing">how to address non-MAVLink gimbal devices</a>.</p><h4 id="how-to-interpret-gimbal-device-attitude-status-yaw-gimbal-angle" tabindex="-1">How to interpret <code>GIMBAL_DEVICE_ATTITUDE_STATUS</code> yaw gimbal angle <a class="header-anchor" href="#how-to-interpret-gimbal-device-attitude-status-yaw-gimbal-angle" aria-label="Permalink to &quot;How to interpret `GIMBAL_DEVICE_ATTITUDE_STATUS` yaw gimbal angle&quot;">​</a></h4><p>The <a href="#GIMBAL_DEVICE_ATTITUDE_STATUS">GIMBAL_DEVICE_ATTITUDE_STATUS.flags</a> field must report the frame used for reported yaw values as <strong>either</strong>:</p><ul><li><code>GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME</code>: Yaw is relative to vehicle.</li><li><code>GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME</code>: Yaw is relative to north.</li></ul><p>For older devices, if neither of the flags above are set, the yaw frame must be inferred from the <code>GIMBAL_DEVICE_FLAGS_YAW_LOCK</code>. If it is set, the yaw is relative to North, otherwise to the front of the vehicle.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Manufacturers working on new gimbal devices should set either <code>GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME</code> or <code>GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME</code>. Components recieving the message should also handle <code>GIMBAL_DEVICE_FLAGS_YAW_LOCK</code> for backwards compatibility with older devices.</p></div><h2 id="message-command-enum-summary" tabindex="-1">Message/Command/Enum Summary <a class="header-anchor" href="#message-command-enum-summary" aria-label="Permalink to &quot;Message/Command/Enum Summary&quot;">​</a></h2><h3 id="gimbal-manager-messages" tabindex="-1">Gimbal Manager Messages <a class="header-anchor" href="#gimbal-manager-messages" aria-label="Permalink to &quot;Gimbal Manager Messages&quot;">​</a></h3><p>This is the set of messages/enums for communicating with the gimbal manager (by ground station, autopilot, etc.).</p><table tabindex="0"><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td><a id="GIMBAL_MANAGER_INFORMATION"></a><a href="./../messages/common.html#GIMBAL_MANAGER_INFORMATION">GIMBAL_MANAGER_INFORMATION</a></td><td>Information about a high level gimbal manager. This message should be requested by a ground station using <a href="#MAV_CMD_REQUEST_MESSAGE">MAV_CMD_REQUEST_MESSAGE</a>.</td></tr><tr><td><a id="GIMBAL_MANAGER_STATUS"></a><a href="./../messages/common.html#GIMBAL_MANAGER_STATUS">GIMBAL_MANAGER_STATUS</a></td><td>Current status about a high level gimbal manager. This message should be broadcast at a low regular rate (e.g. 5Hz).</td></tr><tr><td><a id="GIMBAL_MANAGER_SET_ATTITUDE"></a><a href="./../messages/common.html#GIMBAL_MANAGER_SET_ATTITUDE">GIMBAL_MANAGER_SET_ATTITUDE</a></td><td>High level message to control a gimbal&#39;s attitude. This message is to be sent to the gimbal manager (e.g. from a ground station).</td></tr><tr><td><a id="GIMBAL_MANAGER_SET_MANUAL_CONTROL"></a><a href="./../messages/common.html#GIMBAL_MANAGER_SET_MANUAL_CONTROL">GIMBAL_MANAGER_SET_MANUAL_CONTROL</a></td><td>High level message to control a gimbal manually, so without units. The actual angles or angular rates will be produced by the gimbal manager based on settings. This message is to be sent to the gimbal manager (e.g. from a ground station). Angles and rates can be set to NaN according to use case.</td></tr><tr><td><a id="GIMBAL_MANAGER_SET_PITCHYAW"></a><a href="./../messages/common.html#GIMBAL_MANAGER_SET_PITCHYAW">GIMBAL_MANAGER_SET_PITCHYAW</a></td><td>High level message to control a gimbal&#39;s pitch and yaw angles. This message is to be sent to the gimbal manager (e.g. from a ground station). Angles and rates can be set to NaN according to use case.</td></tr></tbody></table><table tabindex="0"><thead><tr><th>Command</th><th>描述</th></tr></thead><tbody><tr><td><a id="MAV_CMD_REQUEST_MESSAGE"></a><a href="./../messages/common.html#MAV_CMD_REQUEST_MESSAGE">MAV_CMD_REQUEST_MESSAGE</a></td><td>Request the target system(s) emit a single instance of a specified message. This is used to request <a href="#GIMBAL_MANAGER_INFORMATION">GIMBAL_MANAGER_INFORMATION</a>.</td></tr><tr><td><a id="MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE"></a><a href="./../messages/common.html#MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE">MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE</a></td><td>Gimbal configuration to set which sysid/compid is in primary and secondary control.</td></tr><tr><td><a id="MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW"></a><a href="./../messages/common.html#MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW">MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW</a></td><td>High level setpoint to be sent to a gimbal manager to set a gimbal attitude. Note: a gimbal is never to react to this command but only the gimbal manager.</td></tr><tr><td><a id="MAV_CMD_DO_SET_ROI_LOCATION"></a><a href="./../messages/common.html#MAV_CMD_DO_SET_ROI_LOCATION">MAV_CMD_DO_SET_ROI_LOCATION</a></td><td>Sets the region of interest (ROI) to a location. This can then be used by the vehicle&#39;s control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal is not to react to this message.</td></tr><tr><td><a id="MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET"></a><a href="./../messages/common.html#MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET">MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET</a></td><td>Sets the region of interest (ROI) to be toward next waypoint, with optional pitch/roll/yaw offset. This can then be used by the vehicle&#39;s control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message.</td></tr><tr><td><a id="MAV_CMD_DO_SET_ROI_SYSID"></a><a href="./../messages/common.html#MAV_CMD_DO_SET_ROI_SYSID">MAV_CMD_DO_SET_ROI_SYSID</a></td><td>Mount tracks system with specified system ID. Determination of target vehicle position may be done with GLOBAL_POSITION_INT or any other means. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message.</td></tr><tr><td><a id="MAV_CMD_DO_SET_ROI_NONE"></a><a href="./../messages/common.html#MAV_CMD_DO_SET_ROI_NONE">MAV_CMD_DO_SET_ROI_NONE</a></td><td>Cancels any previous ROI command returning the vehicle/sensors to default flight characteristics. This can then be used by the vehicle&#39;s control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message. After this command the gimbal manager should go back to manual input if available, and otherwise assume a neutral position.</td></tr><tr><td><a id="MAV_CMD_DO_GIMBAL_MANAGER_TRACK_POINT"></a><a href="./../messages/common.html#MAV_CMD_DO_GIMBAL_MANAGER_TRACK_POINT">MAV_CMD_DO_GIMBAL_MANAGER_TRACK_POINT</a></td><td>If the gimbal manager supports visual tracking (<code>GIMBAL_MANAGER_CAP_FLAGS_HAS_TRACKING_POINT</code> is set), this command allows to initiate the tracking. Such a tracking gimbal manager would usually be an integrated camera/gimbal, or alternatively a companion computer connected to a camera.</td></tr><tr><td><a id="MAV_CMD_DO_GIMBAL_MANAGER_TRACK_RECTANGLE"></a><a href="./../messages/common.html#MAV_CMD_DO_GIMBAL_MANAGER_TRACK_RECTANGLE">MAV_CMD_DO_GIMBAL_MANAGER_TRACK_RECTANGLE</a></td><td>If the gimbal supports visual tracking (GIMBAL_MANAGER_CAP_FLAGS_HAS_TRACKING_RECTANGLE is set), this command allows to initiate the tracking. Such a tracking gimbal manager would usually be an integrated camera/gimbal, or alternatively a companion computer connected to a camera.</td></tr></tbody></table><table tabindex="0"><thead><tr><th>Enum</th><th>描述</th></tr></thead><tbody><tr><td><a id="GIMBAL_MANAGER_FLAGS"></a><a href="./../messages/common.html#GIMBAL_MANAGER_FLAGS">GIMBAL_MANAGER_FLAGS</a></td><td>Flags for high level gimbal manager operation.<br>The first 16 bytes are identical to the <a href="#GIMBAL_DEVICE_FLAGS">GIMBAL_DEVICE_FLAGS</a>. Used in <a href="#MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW">MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW</a>, <a href="#GIMBAL_MANAGER_STATUS">GIMBAL_MANAGER_STATUS </a>, <a href="#GIMBAL_MANAGER_SET_ATTITUDE">GIMBAL_MANAGER_SET_ATTITUDE</a>.</td></tr><tr><td><a id="GIMBAL_MANAGER_CAP_FLAGS"></a><a href="./../messages/common.html#GIMBAL_MANAGER_CAP_FLAGS">GIMBAL_MANAGER_CAP_FLAGS</a></td><td>Gimbal manager high level capability flags (bitmap).<br>The first 16 bits are identical to the GIMBAL_DEVICE_CAP_FLAGS which are identical with GIMBAL_DEVICE_FLAGS. However, the gimbal manager does not need to copy the flags from the gimbal but can also enhance the capabilities and thus add flags. Used in <a href="#GIMBAL_MANAGER_INFORMATION">GIMBAL_MANAGER_INFORMATION </a></td></tr></tbody></table><h3 id="gimbal-device-messages" tabindex="-1">Gimbal Device Messages <a class="header-anchor" href="#gimbal-device-messages" aria-label="Permalink to &quot;Gimbal Device Messages&quot;">​</a></h3><p>This is the set of messages/enums for communication between gimbal manager and gimbal device.</p><table tabindex="0"><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td><a id="GIMBAL_DEVICE_INFORMATION"></a><a href="./../messages/common.html#GIMBAL_DEVICE_INFORMATION">GIMBAL_DEVICE_INFORMATION</a></td><td>Information about a low level gimbal. This message should be requested by the gimbal manager or a ground station using <code>MAV_CMD_REQUEST_MESSAGE</code>.</td></tr><tr><td><a id="GIMBAL_DEVICE_SET_ATTITUDE"></a><a href="./../messages/common.html#GIMBAL_DEVICE_SET_ATTITUDE">GIMBAL_DEVICE_SET_ATTITUDE</a></td><td>Low level message to control a gimbal device&#39;s attitude. This message is to be sent from the gimbal manager to the gimbal device component. Angles and rates can be set to NaN according to use case.</td></tr><tr><td><a id="GIMBAL_DEVICE_ATTITUDE_STATUS"></a><a href="./../messages/common.html#GIMBAL_DEVICE_ATTITUDE_STATUS">GIMBAL_DEVICE_ATTITUDE_STATUS</a></td><td>Message reporting the status of a gimbal device. This message should be broadcasted by a gimbal device component.</td></tr></tbody></table><table tabindex="0"><thead><tr><th>Command</th><th>描述</th></tr></thead><tbody><tr><td><a id="MAV_CMD_REQUEST_MESSAGE_2"></a><a href="./../messages/common.html#MAV_CMD_REQUEST_MESSAGE">MAV_CMD_REQUEST_MESSAGE</a></td><td>Request the target system(s) emit a single instance of a specified message. This is used to request <a href="#GIMBAL_DEVICE_INFORMATION">GIMBAL_DEVICE_INFORMATION</a>.</td></tr></tbody></table><table tabindex="0"><thead><tr><th>Enum</th><th>描述</th></tr></thead><tbody><tr><td><a id="GIMBAL_DEVICE_CAP_FLAGS"></a><a href="./../messages/common.html#GIMBAL_DEVICE_CAP_FLAGS">GIMBAL_DEVICE_CAP_FLAGS</a></td><td>Gimbal device (low level) capability flags (bitmap).<br>Used in <a href="#GIMBAL_DEVICE_INFORMATION">GIMBAL_DEVICE_INFORMATION</a>.</td></tr><tr><td><a id="GIMBAL_DEVICE_FLAGS"></a><a href="./../messages/common.html#GIMBAL_DEVICE_FLAGS">GIMBAL_DEVICE_FLAGS</a></td><td>Flags for gimbal device (lower level) operation.<br>Used in <a href="#GIMBAL_DEVICE_ATTITUDE_STATUS">GIMBAL_DEVICE_ATTITUDE_STATUS</a> and <a href="#GIMBAL_DEVICE_SET_ATTITUDE">GIMBAL_DEVICE_SET_ATTITUDE</a>.</td></tr><tr><td><a id="GIMBAL_DEVICE_ERROR_FLAGS"></a><a href="./../messages/common.html#GIMBAL_DEVICE_ERROR_FLAGS">GIMBAL_DEVICE_ERROR_FLAGS</a></td><td>Gimbal device (low level) error flags (bitmap, 0 means no error).<br>Used in <a href="#GIMBAL_DEVICE_ATTITUDE_STATUS">GIMBAL_DEVICE_ATTITUDE_STATUS</a>.</td></tr></tbody></table><h2 id="sequences" tabindex="-1">Sequences <a class="header-anchor" href="#sequences" aria-label="Permalink to &quot;Sequences&quot;">​</a></h2><p>Depicted below are message sequences for some common scenarious.</p><h3 id="discovery" tabindex="-1">Discovery <a class="header-anchor" href="#discovery" aria-label="Permalink to &quot;Discovery&quot;">​</a></h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgcGFydGljaXBhbnQgR3JvdW5kIFN0YXRpb25cbiAgICBwYXJ0aWNpcGFudCBHaW1iYWwgTWFuYWdlclxuICAgIHBhcnRpY2lwYW50IEdpbWJhbCBEZXZpY2VcbiAgICBHcm91bmQgU3RhdGlvbi0-PkdpbWJhbCBNYW5hZ2VyOiBDT01NQU5EX1JFUVVFU1RfTUVTU0FHRSAoR0lNQkFMX01BTkFHRVJfSU5GT1JNQVRJT04pXG4gICAgR2ltYmFsIE1hbmFnZXItPj5Hcm91bmQgU3RhdGlvbjogQ09NTUFORF9BQ0tcbiAgICBHaW1iYWwgTWFuYWdlci0-PkdpbWJhbCBEZXZpY2U6IENPTU1BTkRfUkVRVUVTVF9NRVNTQUdFIChHSU1CQUxfREVWSUNFX0lORk9STUFUSU9OKVxuICAgIEdpbWJhbCBEZXZpY2UtPj5HaW1iYWwgTWFuYWdlcjogQ09NTUFORF9BQ0tcbiAgICBHaW1iYWwgRGV2aWNlLT4-R2ltYmFsIE1hbmFnZXI6IEdJTUJBTF9ERVZJQ0VfSU5GT1JNQVRJT05cbiAgICBHaW1iYWwgTWFuYWdlci0-Pkdyb3VuZCBTdGF0aW9uOiBHSU1CQUxfTUFOQUdFUl9JTkZPUk1BVElPTlxuXG4iLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ" target="_blank" rel="noreferrer"><img src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgcGFydGljaXBhbnQgR3JvdW5kIFN0YXRpb25cbiAgICBwYXJ0aWNpcGFudCBHaW1iYWwgTWFuYWdlclxuICAgIHBhcnRpY2lwYW50IEdpbWJhbCBEZXZpY2VcbiAgICBHcm91bmQgU3RhdGlvbi0-PkdpbWJhbCBNYW5hZ2VyOiBDT01NQU5EX1JFUVVFU1RfTUVTU0FHRSAoR0lNQkFMX01BTkFHRVJfSU5GT1JNQVRJT04pXG4gICAgR2ltYmFsIE1hbmFnZXItPj5Hcm91bmQgU3RhdGlvbjogQ09NTUFORF9BQ0tcbiAgICBHaW1iYWwgTWFuYWdlci0-PkdpbWJhbCBEZXZpY2U6IENPTU1BTkRfUkVRVUVTVF9NRVNTQUdFIChHSU1CQUxfREVWSUNFX0lORk9STUFUSU9OKVxuICAgIEdpbWJhbCBEZXZpY2UtPj5HaW1iYWwgTWFuYWdlcjogQ09NTUFORF9BQ0tcbiAgICBHaW1iYWwgRGV2aWNlLT4-R2ltYmFsIE1hbmFnZXI6IEdJTUJBTF9ERVZJQ0VfSU5GT1JNQVRJT05cbiAgICBHaW1iYWwgTWFuYWdlci0-Pkdyb3VuZCBTdGF0aW9uOiBHSU1CQUxfTUFOQUdFUl9JTkZPUk1BVElPTlxuXG4iLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ" alt=""></a></p><p>This shows a possible sequence on startup. Note that the gimbal manager could already discover the gimbal device before the ground station asks for the information.</p><h3 id="normal-manual-control" tabindex="-1">Normal Manual Control <a class="header-anchor" href="#normal-manual-control" aria-label="Permalink to &quot;Normal Manual Control&quot;">​</a></h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgcGFydGljaXBhbnQgR3JvdW5kIFN0YXRpb25cbiAgICBwYXJ0aWNpcGFudCBHaW1iYWwgTWFuYWdlclxuICAgIHBhcnRpY2lwYW50IEdpbWJhbCBEZXZpY2VcbiAgICBHcm91bmQgU3RhdGlvbi0-PkdpbWJhbCBNYW5hZ2VyOiBHSU1CQUxfTUFOQUdFUl9TRVRfQVRUSVRVREUgKHN0cmVhbSlcbiAgICBHaW1iYWwgTWFuYWdlci0-PkdpbWJhbCBEZXZpY2U6IEdJTUJBTF9ERVZJQ0VfU0VUX0FUVElUVURFIChzdHJlYW0pXG4gICAgR2ltYmFsIERldmljZS0-PkdpbWJhbCBNYW5hZ2VyOiBHSU1CQUxfREVWSUNFX0FUVElUVURFX1NUQVRVUyAoc3RyZWFtKVxuICAgIEdpbWJhbCBEZXZpY2UtPj5Hcm91bmQgU3RhdGlvbjogR0lNQkFMX0RFVklDRV9BVFRJVFVERV9TVEFUVVMgKHN0cmVhbSkiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ" target="_blank" rel="noreferrer"><img src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgcGFydGljaXBhbnQgR3JvdW5kIFN0YXRpb25cbiAgICBwYXJ0aWNpcGFudCBHaW1iYWwgTWFuYWdlclxuICAgIHBhcnRpY2lwYW50IEdpbWJhbCBEZXZpY2VcbiAgICBHcm91bmQgU3RhdGlvbi0-PkdpbWJhbCBNYW5hZ2VyOiBHSU1CQUxfTUFOQUdFUl9TRVRfQVRUSVRVREUgKHN0cmVhbSlcbiAgICBHaW1iYWwgTWFuYWdlci0-PkdpbWJhbCBEZXZpY2U6IEdJTUJBTF9ERVZJQ0VfU0VUX0FUVElUVURFIChzdHJlYW0pXG4gICAgR2ltYmFsIERldmljZS0-PkdpbWJhbCBNYW5hZ2VyOiBHSU1CQUxfREVWSUNFX0FUVElUVURFX1NUQVRVUyAoc3RyZWFtKVxuICAgIEdpbWJhbCBEZXZpY2UtPj5Hcm91bmQgU3RhdGlvbjogR0lNQkFMX0RFVklDRV9BVFRJVFVERV9TVEFUVVMgKHN0cmVhbSkiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ" alt=""></a></p><p>During the normal manual control, all messages are streamed at a regular rate. Note that <a href="#GIMBAL_DEVICE_ATTITUDE_STATUS">GIMBAL_DEVICE_ATTITUDE_STATUS</a> is broadcast to anyone, so to the gimbal manager and also the ground station.</p><h3 id="roi-initiated-from-ground-station" tabindex="-1">ROI Initiated from Ground Station <a class="header-anchor" href="#roi-initiated-from-ground-station" aria-label="Permalink to &quot;ROI Initiated from Ground Station&quot;">​</a></h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgcGFydGljaXBhbnQgR3JvdW5kIFN0YXRpb25cbiAgICBwYXJ0aWNpcGFudCBHaW1iYWwgTWFuYWdlclxuICAgIHBhcnRpY2lwYW50IEdpbWJhbCBEZXZpY2VcbiAgICBHcm91bmQgU3RhdGlvbi0-PkdpbWJhbCBNYW5hZ2VyOiBNQVZfQ01EX0RPX1NFVF9ST0lfTE9DQVRJT05cbiAgICBHaW1iYWwgTWFuYWdlci0-Pkdyb3VuZCBTdGF0aW9uOiBDT01NQU5EX0FDS1xuICAgIEdpbWJhbCBNYW5hZ2VyLT4-R2ltYmFsIERldmljZTogR0lNQkFMX0RFVklDRV9TRVRfQVRUSVRVREUgKHN0cmVhbSlcbiAgICBHaW1iYWwgRGV2aWNlLT4-R2ltYmFsIE1hbmFnZXI6IEdJTUJBTF9ERVZJQ0VfQVRUSVRVREVfU1RBVFVTIChzdHJlYW0pXG4gICAgR2ltYmFsIERldmljZS0-Pkdyb3VuZCBTdGF0aW9uOiBHSU1CQUxfREVWSUNFX0FUVElUVURFX1NUQVRVUyAoc3RyZWFtKVxuICAgIEdyb3VuZCBTdGF0aW9uLT4-R2ltYmFsIE1hbmFnZXI6IE1BVl9DTURfRE9fU0VUX1JPSV9OT05FXG4gICAgR2ltYmFsIE1hbmFnZXItPj5Hcm91bmQgU3RhdGlvbjogQ09NTUFORF9BQ0siLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ" target="_blank" rel="noreferrer"><img src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgcGFydGljaXBhbnQgR3JvdW5kIFN0YXRpb25cbiAgICBwYXJ0aWNpcGFudCBHaW1iYWwgTWFuYWdlclxuICAgIHBhcnRpY2lwYW50IEdpbWJhbCBEZXZpY2VcbiAgICBHcm91bmQgU3RhdGlvbi0-PkdpbWJhbCBNYW5hZ2VyOiBNQVZfQ01EX0RPX1NFVF9ST0lfTE9DQVRJT05cbiAgICBHaW1iYWwgTWFuYWdlci0-Pkdyb3VuZCBTdGF0aW9uOiBDT01NQU5EX0FDS1xuICAgIEdpbWJhbCBNYW5hZ2VyLT4-R2ltYmFsIERldmljZTogR0lNQkFMX0RFVklDRV9TRVRfQVRUSVRVREUgKHN0cmVhbSlcbiAgICBHaW1iYWwgRGV2aWNlLT4-R2ltYmFsIE1hbmFnZXI6IEdJTUJBTF9ERVZJQ0VfQVRUSVRVREVfU1RBVFVTIChzdHJlYW0pXG4gICAgR2ltYmFsIERldmljZS0-Pkdyb3VuZCBTdGF0aW9uOiBHSU1CQUxfREVWSUNFX0FUVElUVURFX1NUQVRVUyAoc3RyZWFtKVxuICAgIEdyb3VuZCBTdGF0aW9uLT4-R2ltYmFsIE1hbmFnZXI6IE1BVl9DTURfRE9fU0VUX1JPSV9OT05FXG4gICAgR2ltYmFsIE1hbmFnZXItPj5Hcm91bmQgU3RhdGlvbjogQ09NTUFORF9BQ0siLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ" alt=""></a></p><p>ROI can be started using a command and should also be stopped again with a command. The ROI command is translated to a gimbal attitude in the the gimbal manager.</p><h3 id="attitude-set-during-mission" tabindex="-1">Attitude Set During Mission <a class="header-anchor" href="#attitude-set-during-mission" aria-label="Permalink to &quot;Attitude Set During Mission&quot;">​</a></h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgcGFydGljaXBhbnQgR3JvdW5kIFN0YXRpb25cbiAgICBwYXJ0aWNpcGFudCBHaW1iYWwgTWFuYWdlclxuICAgIHBhcnRpY2lwYW50IEdpbWJhbCBEZXZpY2VcbiAgICBHaW1iYWwgTWFuYWdlci0-PkdpbWJhbCBNYW5hZ2VyOiBDTURfRE9fR0lNQkFMX01BTkFHRVJfQVRUSVRVREVcbiAgICBHaW1iYWwgTWFuYWdlci0-PkdpbWJhbCBEZXZpY2U6IEdJTUJBTF9ERVZJQ0VfU0VUX0FUVElUVURFIChzdHJlYW0pXG4gICAgR2ltYmFsIERldmljZS0-PkdpbWJhbCBNYW5hZ2VyOiBHSU1CQUxfREVWSUNFX0FUVElUVURFX1NUQVRVUyAoc3RyZWFtKVxuICAgIEdpbWJhbCBEZXZpY2UtPj5Hcm91bmQgU3RhdGlvbjogR0lNQkFMX0RFVklDRV9BVFRJVFVERV9TVEFUVVMgKHN0cmVhbSlcbiAgICBHaW1iYWwgTWFuYWdlci0-PkdpbWJhbCBNYW5hZ2VyOiBDTURfRE9fR0lNQkFMX01BTkFHRVJfQVRUSVRVREUgKEZsYWc6IE5PTkUpIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifSwidXBkYXRlRWRpdG9yIjpmYWxzZX0" target="_blank" rel="noreferrer"><img src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgcGFydGljaXBhbnQgR3JvdW5kIFN0YXRpb25cbiAgICBwYXJ0aWNpcGFudCBHaW1iYWwgTWFuYWdlclxuICAgIHBhcnRpY2lwYW50IEdpbWJhbCBEZXZpY2VcbiAgICBHaW1iYWwgTWFuYWdlci0-PkdpbWJhbCBNYW5hZ2VyOiBDTURfRE9fR0lNQkFMX01BTkFHRVJfQVRUSVRVREVcbiAgICBHaW1iYWwgTWFuYWdlci0-PkdpbWJhbCBEZXZpY2U6IEdJTUJBTF9ERVZJQ0VfU0VUX0FUVElUVURFIChzdHJlYW0pXG4gICAgR2ltYmFsIERldmljZS0-PkdpbWJhbCBNYW5hZ2VyOiBHSU1CQUxfREVWSUNFX0FUVElUVURFX1NUQVRVUyAoc3RyZWFtKVxuICAgIEdpbWJhbCBEZXZpY2UtPj5Hcm91bmQgU3RhdGlvbjogR0lNQkFMX0RFVklDRV9BVFRJVFVERV9TVEFUVVMgKHN0cmVhbSlcbiAgICBHaW1iYWwgTWFuYWdlci0-PkdpbWJhbCBNYW5hZ2VyOiBDTURfRE9fR0lNQkFMX01BTkFHRVJfQVRUSVRVREUgKEZsYWc6IE5PTkUpIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifSwidXBkYXRlRWRpdG9yIjpmYWxzZX0" alt=""></a></p><p>In this case the gimbal manager is implemented by the autopilot which &quot;sends&quot; the attitude command (for instance for a survey).</p><h2 id="how-to-implement-the-gimbal-device-interface" tabindex="-1">How to Implement the Gimbal Device Interface <a class="header-anchor" href="#how-to-implement-the-gimbal-device-interface" aria-label="Permalink to &quot;How to Implement the Gimbal Device Interface&quot;">​</a></h2><p>Below is a short summary of all messages that a gimbal device should implement.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>A <em>Gimbal Device</em> can be tested by connecting it to an autopilot with a <em>Gimbal Manager</em>. To avoid having to do a full setup including autopilot, a <a href="https://github.com/mavlink/MAVSDK/tree/develop/examples/gimbal_device_tester" target="_blank" rel="noreferrer">direct test using MAVSDK</a> is available.</p></div><h3 id="messages-to-send" tabindex="-1">Messages to Send <a class="header-anchor" href="#messages-to-send" aria-label="Permalink to &quot;Messages to Send&quot;">​</a></h3><p>The messages listed should be broadcast on the network/on all connections (sent to everyone).</p><h4 id="heartbeat" tabindex="-1"><a href="./../messages/common.html#HEARTBEAT">HEARTBEAT</a> <a class="header-anchor" href="#heartbeat" aria-label="Permalink to &quot;[HEARTBEAT](../messages/common.md#HEARTBEAT)&quot;">​</a></h4><p>Heartbeats should always be sent (usually at 1 Hz).</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Gimbals that set their <code>sysid</code> from the autopilot will need to wait for the autopilot&#39;s heartbeat before emitting their own (note that if the gimbal can receive heartbeats from multiple autopilots then the <code>sysid</code> must be explicitly/statically configured).</p></div><ul><li><code>sysid</code>: the same sysid as the autopilot (this can either be done by configuration, or by listening to the autopilot&#39;s heartbeat first and then copying the sysid, default: 1)</li><li><code>compid</code>: <a href="./../messages/common.html#MAV_COMP_ID_GIMBAL">MAV_COMP_ID_GIMBAL</a></li><li><code>type</code>: <a href="./../messages/common.html#MAV_TYPE_GIMBAL">MAV_TYPE_GIMBAL</a></li><li><code>autopilot</code>: <a href="./../messages/common.html#MAV_AUTOPILOT_INVALID">MAV_AUTOPILOT_INVALID</a></li><li><code>base_mode</code>: 0</li><li><code>custom_mode</code>: 0</li><li><code>system_status</code>: <code>MAV_STATE_UNINIT</code></li></ul><h4 id="gimbal-device-attitude-status" tabindex="-1"><a href="#GIMBAL_DEVICE_ATTITUDE_STATUS">GIMBAL_DEVICE_ATTITUDE_STATUS</a> <a class="header-anchor" href="#gimbal-device-attitude-status" aria-label="Permalink to &quot;[GIMBAL_DEVICE_ATTITUDE_STATUS](#GIMBAL_DEVICE_ATTITUDE_STATUS)&quot;">​</a></h4><p>The gimbal device should send out its attitude status at a regular rate, e.g. 10 Hz. The fields <code>target_system</code> and <code>target_component</code> can be set to 0 (broadcast) by default.</p><h4 id="gimbal-device-information" tabindex="-1"><a href="#GIMBAL_DEVICE_INFORMATION">GIMBAL_DEVICE_INFORMATION</a> <a class="header-anchor" href="#gimbal-device-information" aria-label="Permalink to &quot;[GIMBAL_DEVICE_INFORMATION](#GIMBAL_DEVICE_INFORMATION)&quot;">​</a></h4><p>The static information about the gimbal device needs to be sent out when requested using <a href="./../messages/common.html#MAV_CMD_REQUEST_MESSAGE">MAV_CMD_REQUEST_MESSAGE</a>.</p><h3 id="messages-to-listen-to-handle" tabindex="-1">Messages to Listen To/Handle <a class="header-anchor" href="#messages-to-listen-to-handle" aria-label="Permalink to &quot;Messages to Listen To/Handle&quot;">​</a></h3><h4 id="gimbal-device-set-attitude" tabindex="-1"><a href="#GIMBAL_DEVICE_SET_ATTITUDE">GIMBAL_DEVICE_SET_ATTITUDE</a> <a class="header-anchor" href="#gimbal-device-set-attitude" aria-label="Permalink to &quot;[GIMBAL_DEVICE_SET_ATTITUDE](#GIMBAL_DEVICE_SET_ATTITUDE)&quot;">​</a></h4><p>This is the actual attitude setpoint that the gimbal device should follow. Note that the frame of the quaternion setpoint depends on the <a href="#GIMBAL_DEVICE_FLAGS">GIMBAL_DEVICE_FLAGS</a>.</p><h4 id="autopilot-state-for-gimbal-device-1" tabindex="-1"><a href="#AUTOPILOT_STATE_FOR_GIMBAL_DEVICE">AUTOPILOT_STATE_FOR_GIMBAL_DEVICE</a> <a class="header-anchor" href="#autopilot-state-for-gimbal-device-1" aria-label="Permalink to &quot;[AUTOPILOT_STATE_FOR_GIMBAL_DEVICE](#AUTOPILOT_STATE_FOR_GIMBAL_DEVICE)&quot;">​</a></h4><p>The gimbal device should be able to get all the information from the autopilot that it requires in this one message. If something is missing that should be streamed at a high rate, it should be added to this message.</p><p>If this message is not sent by default by the autopilot, or the rate is not ok, the command <a href="./../messages/common.html#MAV_CMD_SET_MESSAGE_INTERVAL">MAV_CMD_SET_MESSAGE_INTERVAL</a> can be used to request it at a certain rate.</p><h4 id="command-long" tabindex="-1"><a href="./../messages/common.html#COMMAND_LONG">COMMAND_LONG</a> <a class="header-anchor" href="#command-long" aria-label="Permalink to &quot;[COMMAND_LONG](../messages/common.md#COMMAND_LONG)&quot;">​</a></h4><p>The gimbal device needs to check for commands. See below which commands should get answered.</p><h3 id="commands-to-answer" tabindex="-1">Commands to Answer <a class="header-anchor" href="#commands-to-answer" aria-label="Permalink to &quot;Commands to Answer&quot;">​</a></h3><h4 id="mav-cmd-request-message" tabindex="-1"><a href="./../messages/common.html#MAV_CMD_REQUEST_MESSAGE">MAV_CMD_REQUEST_MESSAGE</a> <a class="header-anchor" href="#mav-cmd-request-message" aria-label="Permalink to &quot;[MAV_CMD_REQUEST_MESSAGE](../messages/common.md#MAV_CMD_REQUEST_MESSAGE)&quot;">​</a></h4><p>The gimbal device should send out messages when they get requested, e.g. <a href="#GIMBAL_DEVICE_INFORMATION">GIMBAL_DEVICE_INFORMATION</a>.</p><h4 id="mav-cmd-set-message-interval" tabindex="-1"><a href="./../messages/common.html#MAV_CMD_SET_MESSAGE_INTERVAL">MAV_CMD_SET_MESSAGE_INTERVAL</a> <a class="header-anchor" href="#mav-cmd-set-message-interval" aria-label="Permalink to &quot;[MAV_CMD_SET_MESSAGE_INTERVAL](../messages/common.md#MAV_CMD_SET_MESSAGE_INTERVAL)&quot;">​</a></h4><p>The gimbal device should stream messages at the rate requested.</p>',154)]))}const g=a(s,[["render",l]]);export{b as __pageData,g as default};
