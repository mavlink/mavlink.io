import{_ as e,c as a,a8 as s,o as n}from"./chunks/framework.CnRC9NRC.js";const f=JSON.parse('{"title":"File Formats","description":"","frontmatter":{},"headers":[],"relativePath":"en/file_formats/index.md","filePath":"en/file_formats/index.md"}'),i={name:"en/file_formats/index.md"};function o(l,t,r,p,d,m){return n(),a("div",null,t[0]||(t[0]=[s(`<h1 id="file-formats" tabindex="-1">File Formats <a class="header-anchor" href="#file-formats" aria-label="Permalink to &quot;File Formats&quot;">​</a></h1><p>MAVLink systems often need to be able to store, exchange, or restore MAVLink information, including: mission plans, geofence definitions, rally points, parameters, logs, etc. Often the information is defined on one system and used on another (e.g. logs from an autopilot are parsed by analysis tools, missions are created using GCS planning tools and run from a companion computer).</p><p>There is a <em>defacto</em> standard used in many GCS systems and developer APIs for storing <em>mission</em> information: <a href="#mission_plain_text_file">plain-text file format</a>.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>At time of writing there are no MAVLink standards (defacto or otherwise) for: geofence, rally points, parameters etc. There is a discussion about standardising file formats in <a href="https://github.com/mavlink/mavlink/issues/989" target="_blank" rel="noreferrer">Issue #989</a>.</p></div><h2 id="mission_plain_text_file" tabindex="-1">Mission Plain-Text File Format <a class="header-anchor" href="#mission_plain_text_file" aria-label="Permalink to &quot;Mission Plain-Text File Format {#mission_plain_text_file}&quot;">​</a></h2><p><em>QGroundControl</em> and many other GCS support an older plain-text format for missions. This is not officially part of MAVLink and does not allow rally point or geofence information to be provided.</p><p>The format is shown below. The first line contains the file format and version information, while subsequent the line(s) are mission items.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QGC WPL &lt;VERSION&gt;</span></span>
<span class="line"><span>&lt;INDEX&gt; &lt;CURRENT WP&gt; &lt;COORD FRAME&gt; &lt;COMMAND&gt; &lt;PARAM1&gt; &lt;PARAM2&gt; &lt;PARAM3&gt; &lt;PARAM4&gt; &lt;PARAM5/X/LATITUDE&gt; &lt;PARAM6/Y/LONGITUDE&gt; &lt;PARAM7/Z/ALTITUDE&gt; &lt;AUTOCONTINUE&gt;</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The spaces between the numbers/fields above are <code>&lt;tab&gt;</code> (i.e. <code>\\t</code> in most programming languages).</p></div><p>For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QGC WPL 110</span></span>
<span class="line"><span>0	1	0	16	0.149999999999999994	0	0	0	8.54800000000000004	47.3759999999999977	550	1</span></span>
<span class="line"><span>1	0	0	16	0.149999999999999994	0	0	0	8.54800000000000004	47.3759999999999977	550	1</span></span>
<span class="line"><span>2	0	0	16	0.149999999999999994	0	0	0	8.54800000000000004	47.3759999999999977	550	1</span></span></code></pre></div>`,11)]))}const h=e(i,[["render",o]]);export{f as __pageData,h as default};
