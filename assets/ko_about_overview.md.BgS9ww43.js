import{_ as s,c as e,a8 as a,o as t}from"./chunks/framework.CnRC9NRC.js";const c=JSON.parse('{"title":"Protocol Overview","description":"","frontmatter":{},"headers":[],"relativePath":"ko/about/overview.md","filePath":"ko/about/overview.md"}'),n={name:"ko/about/overview.md"};function o(r,i,h,l,p,d){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="protocol-overview" tabindex="-1">Protocol Overview <a class="header-anchor" href="#protocol-overview" aria-label="Permalink to &quot;Protocol Overview&quot;">​</a></h1><p>MAVLink is a binary telemetry protocol designed for resource-constrained systems and bandwidth-constrained links. MAVLink is deployed in two major versions: v1.0 and v2.0, which is backwards-compatible (v2.0 implementations can parse and send v1.0 packets). Telemetry data streams are sent in a multicast design while protocol aspects that change the system configuration and require guaranteed delivery like the <a href="./../services/mission.html">mission protocol</a> or <a href="./../services/parameter.html">parameter protocol</a> are point-to-point with retransmission.</p><h2 id="mavlink-2-packet-format" tabindex="-1">MAVLink 2 Packet Format <a class="header-anchor" href="#mavlink-2-packet-format" aria-label="Permalink to &quot;MAVLink 2 Packet Format&quot;">​</a></h2><p>Below is the over-the-wire format for a <a href="./../guide/mavlink_2.html">MAVLink v2</a> packet. The in-memory representation might differ.</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> magic;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              ///&lt; protocol magic marker</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                ///&lt; Length of payload</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> incompat_flags;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     ///&lt; flags that must be understood</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> compat_flags;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       ///&lt; flags that can be ignored if not understood</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> seq;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                ///&lt; Sequence of packet</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sysid;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              ///&lt; ID of message sender system/aircraft</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> compid;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             ///&lt; ID of the message sender component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msgid </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          ///&lt; first 8 bits of the ID of the message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msgid </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         ///&lt; middle 8 bits of the ID of the message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msgid </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ///&lt; last 8 bits of the ID of the message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[max </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   ///&lt; A maximum of 255 payload bytes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> checksum;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          ///&lt; CRC-16/MCRF4XX</span></span></code></pre></div><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> signature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ///&lt; Signature which allows ensuring that the link is tamper-proof (optional)</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The <a href="./../guide/serialization.html#v1_packet_format">MAVLink 1 packet format</a> is similar, but omits <code>incompat_flags</code>, <code>compat_flags</code> and <code>signature</code>, and only has a single byte for the message address. For more information see <a href="./../guide/serialization.html#packet_format">Serialization &gt; Packet Format</a>.</p></div><h2 id="직렬화" tabindex="-1">직렬화 <a class="header-anchor" href="#직렬화" aria-label="Permalink to &quot;직렬화&quot;">​</a></h2><p>The over-the-wire format of MAVLink is optimized for resource-constrained systems and hence the field order is not the same as in the XML specification. The over-the-wire generator sorts all fields of the message according to size, with the largest fields (<code>uint64_t</code>) first, then down to smaller fields. The sorting is done using a <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability" target="_blank" rel="noreferrer">stable sorting algorithm</a>, which ensures that any fields that do not need to be reordered stay in the same relative order. This prevents alignment issues on the encoding / decoding systems and allows for very efficient packing / unpacking.</p><p>For more information and specific exceptions see <a href="./../guide/serialization.html">Serialization</a>.</p><h2 id="multicast-streams-vs-guaranteed-delivery" tabindex="-1">Multicast Streams vs. Guaranteed Delivery <a class="header-anchor" href="#multicast-streams-vs-guaranteed-delivery" aria-label="Permalink to &quot;Multicast Streams vs. Guaranteed Delivery&quot;">​</a></h2><p>MAVLink is built for hybrid networks where high-rate data streams from data sources (commonly drones) flow to data sinks (commonly ground stations), but are mixed with transfers requiring guaranteed delivery. The key insight is that for most <strong>telemetry streams</strong> there is not a known or single recipient: Instead, typically an onboard computer, a ground control station and a cloud system all need the same data stream.</p><p>On the other hand configuring the <strong>onboard mission</strong> or changing the system configuration with <strong>onboard parameters</strong> requires point-to-point communication with guaranteed delivery. MAVLink achieves very high efficiency by allowing both modes of operation.</p><h2 id="topic-mode-publish-subscribe" tabindex="-1">Topic Mode (publish-subscribe) <a class="header-anchor" href="#topic-mode-publish-subscribe" aria-label="Permalink to &quot;Topic Mode \\(publish-subscribe\\)&quot;">​</a></h2><p>In topic mode the protocol will not emit a target system and component ID for messages to save link bandwidth. Typical examples for this communication mode are all autopilot data streams like position, attitude, etc.</p><p>The main benefit of this multicast mode is that no additional overhead is generated and multiple subscribers can all receive this data.</p><h2 id="point-to-point-mode" tabindex="-1">Point-to-Point Mode <a class="header-anchor" href="#point-to-point-mode" aria-label="Permalink to &quot;Point-to-Point Mode&quot;">​</a></h2><p>In point-to-point mode MAVLink uses a target ID and target component. In most cases where these fields are used the sub-protocol also ensures guaranteed delivery (missions, parameters, commands).</p><h2 id="integrity-checks-checksum" tabindex="-1">Integrity Checks / Checksum <a class="header-anchor" href="#integrity-checks-checksum" aria-label="Permalink to &quot;Integrity Checks / Checksum&quot;">​</a></h2><p>MAVLink implements two integrity checks: The first check is on the integrity of the packet during transmission using the CRC-16/MCRF4XX checksum. This however only ensures that the data has not been altered on the link - it does not ensure consistency with the data definition. The second integrity check is on the <a href="https://en.wikipedia.org/wiki/Data_definition_language" target="_blank" rel="noreferrer">data description</a> to ensure that two messages with the same ID are indeed containing the same information. To achieve this the data definition itself is run through CRC-16-CCITT and the resulting value is used to seed the packet CRC. Most reference implementations store this constant in an array named <strong>CRC_EXTRA</strong>.</p>`,20)]))}const g=s(n,[["render",o]]);export{c as __pageData,g as default};
