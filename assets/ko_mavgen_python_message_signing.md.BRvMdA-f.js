import{_ as i,c as a,a8 as n,o as e}from"./chunks/framework.CnRC9NRC.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/mavgen_python/message_signing.md","filePath":"ko/mavgen_python/message_signing.md"}'),t={name:"ko/mavgen_python/message_signing.md"};function l(h,s,p,k,g,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="message-signing-pymavlink" tabindex="-1">Message Signing (Pymavlink) <a class="header-anchor" href="#message-signing-pymavlink" aria-label="Permalink to &quot;Message Signing (Pymavlink)&quot;">​</a></h2><p>Pymavlink supports <a href="./../guide/message_signing.html">Message Signing</a> (authentication) when using <a href="./../guide/mavlink_2.html">MAVLink 2</a>.</p><p>The Pymavlink library already implements almost all of the expected behaviour for signing messages. All you need to do is provide a secret key and initial timestamp, optionally specify whether or not outgoing messages should be signed, a link id, and a callback for determining which unsigned messages (if any) will be accepted.</p><p>The way you do this depends on whether you are using <strong>mavutil</strong> to manage the connection or using a <code>MAVLink</code> object directly.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>While not covered in this topic, you should also write code to:</p><ul><li>Save and load the key and last-timestamp from permanent storage</li><li>Implement a mechanism to create and share the key. For more information see <a href="./../guide/message_signing.html#secret_key">Message Signing &gt; Secret Key Management</a>.</li></ul></div><h4 id="signing-using-mavlink-class" tabindex="-1">Signing using MAVLink Class <a class="header-anchor" href="#signing-using-mavlink-class" aria-label="Permalink to &quot;Signing using MAVLink Class&quot;">​</a></h4><p>If you are using the <code>MAVLink</code> class directly, you can use the <strong><code>MAVLink.signing</code></strong> attribute to access a <code>MAVLinkSigning</code> object and set the required attributes.</p><p>The <a href="https://github.com/ArduPilot/pymavlink/blob/master/examples/mavtest.py" target="_blank" rel="noreferrer">example/mavtest.py</a> script shows how to do this using an arbitrary secret key:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a MAVLink instance (in this case on a file object &quot;f&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mav </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mavlink.MAVLink(f)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signing:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mav.signing.secret_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mav.signing.link_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mav.signing.timestamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mav.signing.sign_outgoing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The <code>MAVLink</code> class does not ensure that your <code>link_id</code> or <em>initial</em> <code>timestamp</code> are appropriate. The initial timestamp should be based on current system time. For more information see <a href="./../guide/message_signing.html#timestamp">Message Signing</a>.</p></div><h4 id="signing-using-mavutil" tabindex="-1">Signing using mavutil <a class="header-anchor" href="#signing-using-mavutil" aria-label="Permalink to &quot;Signing using mavutil&quot;">​</a></h4><p>If you are using <strong>mavutil</strong> to manage the connection then you can set up/disable signing using the methods shown below:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Setup signing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup_signing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, secret_key, sign_outgoing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, allow_unsigned_callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, initial_timestamp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, link_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Disable signing (clear secret key and all the other settings specified with setup_signing)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> disable_signing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span></code></pre></div><p>The <code>setup_signing()</code> method sets up the <code>MAVLink</code> object owned by the connection and provides some additional code:</p><ul><li>If <code>link_id</code> is not specified then internally the value is iterated.</li><li>If <code>initial_timestamp</code> is not set then an appropriate value for current time is populated from the underlying OS.</li></ul><h4 id="using-allow-unsigned-callback" tabindex="-1">Using allow_unsigned_callback <a class="header-anchor" href="#using-allow-unsigned-callback" aria-label="Permalink to &quot;Using allow_unsigned_callback&quot;">​</a></h4><p><a href="./../guide/message_signing.html#accepting_unsigned_packets">Message Signing &gt; Accepting Unsigned Packets</a> and <a href="./../guide/message_signing.html#accepting_incorrectly_signed_packets">Accepting Incorrectly Signed Packets</a> specify that a message signing implementation should provide mechanisms such that library users can choose to conditionally accept unsigned or incorrectly signed packets.</p><p>Pymavlink provides the optional <code>allow_unsigned_callback()</code> callback for this purpose. The prototype for this function is:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allow_unsigned_callback(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msgId)</span></span></code></pre></div><p>If set as part of the signing configuration then this function will be called on any unsigned packet (including all <em>MAVLink 1</em> packets) or any packet where the signature is incorrect. If the function returns <code>False</code> the message will be dropped (otherwise it will be handled as though signed).</p><p>The rules for what unsigned packets should be accepted is implementation specific, but it is suggested the implementations always accept <code>RADIO_STATUS</code> packets for feedback from 3DR radios (which don&#39;t support signing)</p><p>For example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Assuming you already have a connection set up</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">the_connection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mavutil.mavlink_connection(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a callback to specify the messages to accept</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_allow_unsigned_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self,msgId):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #Allow radio status messages</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msgId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mavutil.mavlink.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAVLINK_MSG_ID_RADIO_STATUS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Pass the callback  to the connection (here we also pass an arbitrary secret key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">secret_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">the_connection.setup_signing(secret_key, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sign_outgoing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">allow_unsigned_callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_allow_unsigned_callback)</span></span></code></pre></div>`,23)]))}const c=i(t,[["render",l]]);export{d as __pageData,c as default};
