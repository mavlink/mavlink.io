import{_ as t,c as a,a8 as n,o as s}from"./chunks/framework.CnRC9NRC.js";const h=JSON.parse('{"title":"Events Interface (WIP)","description":"","frontmatter":{},"headers":[],"relativePath":"en/services/events.md","filePath":"en/services/events.md"}'),o={name:"en/services/events.md"};function r(i,e,l,m,d,c){return s(),a("div",null,e[0]||(e[0]=[n('<h1 id="events-interface-wip" tabindex="-1">Events Interface (WIP) <a class="header-anchor" href="#events-interface-wip" aria-label="Permalink to &quot;Events Interface (WIP)&quot;">​</a></h1><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>The Events Interface is a work in progress and may change. It has an initial implementation in PX4 and QGroundControl and is planned for ArduPilot.</p><p>The information below is just an overview. Full details of the interface are provided in the: <a href="https://docs.google.com/document/d/18qdDgfML97lItom09MJhngYnFzAm1zFdmlCKG7TaBpg/edit" target="_blank" rel="noreferrer">Events Interface Proposal</a></p></div><p>The <em>Events Interface</em> is a generic and flexible mechanism that allows one component to reliably notify a GCS (or any other component) of sporadic events and state changes. For example, the interface might be used notifying of arming readiness, calibration completion, and reaching the target takeoff height.</p><p>The interface provides for both common events that are shared by flight stacks or other components, and events that are specific to an implementation. MAVLink &quot;common&quot; events are defined in <a href="https://github.com/mavlink/libevents/blob/master/events/common.json" target="_blank" rel="noreferrer">mavlink/libevents/events/common.json</a>.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The events interface is intended to replace the widespread use of <a href="./../messages/common.html#STATUSTEXT">STATUSTEXT</a> messages, which are not really fit for purpose.</p></div><h2 id="key-features" tabindex="-1">Key features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key features&quot;">​</a></h2><p>The following key features are provided by the interface:</p><ul><li>Reliable delivery with retransmission</li><li>Consistent interface to report system health and arming checks.</li><li>Minimized buffer requirements on the autopilot side.</li><li>Minimized binary message length</li><li>Generic: autopilot- and GCS-agnostic.</li><li>Long-term stable and extensible</li><li>Allows arguments to be attached to an event.</li><li>Possible types: uint8, int8, uint16, int16, uint32, int32, int64, uint64, float</li><li>Enums and bit fields can be built on top of these types</li><li>Enable automated processing (for example from a flight log containing events).</li><li>Minimize amount of auto-generated code for embedded implementations.</li><li>Events volume of &lt;1 Hz on average (may scale with protocol parameters adjustments, like retransmission timeouts).</li><li>Events can be targeted or broadcast</li><li>Any component can send events, including cameras, companion computers, ground stations, etc.</li><li>Events have metadata, like a log level. They can also have a detailed, more extensive description, possibly with URLs.</li><li>Support for message text and message translation.</li></ul><h2 id="message-enum-summary" tabindex="-1">Message/Enum Summary <a class="header-anchor" href="#message-enum-summary" aria-label="Permalink to &quot;Message/Enum Summary&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Message</th><th>Description</th></tr></thead><tbody><tr><td><a id="EVENT"></a><a href="./../messages/common.html#EVENT">EVENT</a></td><td>Event message. Each new event from a particular component gets a new sequence number. The same message might be sent multiple times if (re-)requested. Most events are broadcast, some can be specific to a target component (as receivers keep track of the sequence for missed events, all events need to be broadcast. Thus we use destination_component instead of target_component).</td></tr><tr><td><a id="CURRENT_EVENT_SEQUENCE"></a><a href="./../messages/common.html#CURRENT_EVENT_SEQUENCE">CURRENT_EVENT_SEQUENCE</a></td><td>Regular broadcast for the current latest event sequence number for a component. This is used to check for dropped events.</td></tr><tr><td><a id="REQUEST_EVENT"></a><a href="./../messages/common.html#REQUEST_EVENT">REQUEST_EVENT</a></td><td>Request one or more events to be (re-)sent. If first_sequence==last_sequence, only a single event is requested. Note that first_sequence can be larger than last_sequence (because the sequence number can wrap). Each sequence will trigger an EVENT or EVENT_ERROR response.</td></tr><tr><td><a id="RESPONSE_EVENT_ERROR"></a><a href="./../messages/common.html#RESPONSE_EVENT_ERROR">RESPONSE_EVENT_ERROR</a></td><td>Response to a <a href="#REQUEST_EVENT">REQUEST_EVENT</a> if there is an error requesting an event, including the reason. The most common reason would be that the event is not longer available (has been discarded).</td></tr></tbody></table><table tabindex="0"><thead><tr><th>Enum</th><th>Description</th></tr></thead><tbody><tr><td><a id="MAV_EVENT_CURRENT_SEQUENCE_FLAGS"></a><a href="./../messages/common.html#CURRENT_EVENT_SEQUENCE">MAV_EVENT_CURRENT_SEQUENCE_FLAGS</a></td><td>Flags for <a href="#CURRENT_EVENT_SEQUENCE">CURRENT_EVENT_SEQUENCE</a>. For exmaple, to indicate when the sequence has reset.</td></tr><tr><td><a id="MAV_EVENT_ERROR_REASON"></a><a href="./../messages/common.html#MAV_EVENT_ERROR_REASON">MAV_EVENT_ERROR_REASON</a></td><td>Reasons for an error, as provided in <a href="#RESPONSE_EVENT_ERROR">RESPONSE_EVENT_ERROR</a>. For example, common error would be that the event is not available (i.e. it has been discarded).</td></tr></tbody></table><h2 id="implementations" tabindex="-1">Implementations <a class="header-anchor" href="#implementations" aria-label="Permalink to &quot;Implementations&quot;">​</a></h2><p>Implementation PRs and other information is listed below. All of these should be considered prototypes/WIP.</p><ul><li>QGroundControl <ul><li>PR: <a href="https://github.com/mavlink/qgroundcontrol/pull/9217" target="_blank" rel="noreferrer">Events interface (first iteration) #9217</a></li></ul></li><li>PX4: <ul><li><a href="http://docs.px4.io/master/en/concept/events_interface.html" target="_blank" rel="noreferrer">Events Interface</a> (docs)</li><li>PR: <a href="https://github.com/PX4/PX4-Autopilot/pull/16293" target="_blank" rel="noreferrer">Events interface #16293</a></li></ul></li></ul>',14)]))}const u=t(o,[["render",r]]);export{h as __pageData,u as default};
