import{_ as i,c as a,a8 as e,o as t}from"./chunks/framework.CnRC9NRC.js";const F=JSON.parse('{"title":"MAVLink C UDP 示例","description":"","frontmatter":{},"headers":[],"relativePath":"zh/mavgen_c/example_c_udp.md","filePath":"zh/mavgen_c/example_c_udp.md"}'),n={name:"zh/mavgen_c/example_c_udp.md"};function l(h,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="mavlink-c-udp-示例" tabindex="-1">MAVLink C UDP 示例 <a class="header-anchor" href="#mavlink-c-udp-示例" aria-label="Permalink to &quot;MAVLink C UDP 示例&quot;">​</a></h1><p>The <a href="https://github.com/mavlink/mavlink/tree/master/examples/linux" target="_blank" rel="noreferrer">MAVLink UDP Example</a> is a simple C example that sends some data to <em>QGroundControl</em> using MAVLink over UDP. <em>QGroundControl</em> responds with heartbeats and other messages, which are then printed by this program.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The example should work on any Unix-like system (Linux, MacOS, BSD, etc.). These instructions were tested on a clean <em>Ubuntu LTS 20.04</em> installation using the default version of <em>gcc</em> (9.3.0).</p></div><h2 id="构建-运行示例" tabindex="-1">构建/运行示例 <a class="header-anchor" href="#构建-运行示例" aria-label="Permalink to &quot;构建/运行示例&quot;">​</a></h2><p>下面的说明演示如何生成和运行该示例。</p><ol><li><p><a href="./../getting_started/installation.html">Install MAVLink</a> and <a href="./../getting_started/generate_libraries.html">generate</a> the MAVLink 2.0 libraries into the <strong>mavlink/include</strong> directory. For example, to generate the headers for common.xml you could use the command line:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pymavlink.tools.mavgen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --lang=C</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --wire-protocol=2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --output=./include/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> message_definitions/v1.0/common.xml</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">&gt; Alternatively you can clone the [mavlink/mavlink](https://github.com/mavlink/mavlink/) repository and [Download prebuilt headers](../index.md#prebuilt_libraries) to the same location.</p><p></p></div><div class="note custom-block github-alert"><p class="custom-block-title">&gt; The example will not work with MAVLink 1 because it uses a message that includes extension fields which do not exist in MAVLink 1 (\`SYS_STATUS\`).</p><p></p></div><div class="note custom-block github-alert"><p class="custom-block-title">&gt; You can put/generate the library wherever you like, but the build command below assumes they are located in directory named **include** below the MAVLink root directory.</p><p></p></div></li><li><p>Open a terminal and navigate to <a href="https://github.com/mavlink/mavlink/tree/master/examples/linux" target="_blank" rel="noreferrer">examples/linux</a></p></li><li><p>使用下列命令编译GCC：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -std=c99</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../../include/common</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mavlink_udp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mavlink_udp.c</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">&gt; The MAVLink header directory must be added to the include path.</p><p></p><blockquote><p>The path here assumes you are building the code from the example directory, and that have installed the headers in <strong>mavlink/include</strong>.</p></blockquote></div></li><li><p>从终端运行可执行文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./mavlink_udp</span></span></code></pre></div><p>默认情况下，实例将接收本地主机IP地址，1451端口的数据。 You can specify another IP address as a command line argument (use <code>./mavlink_udp --help</code> to see usage).</p></li><li><p>Open <em>QGroundControl</em> on the same machine.</p><p><em>QGroundControl</em> immediately starts broadcasting its <code>HEARTBEAT</code> on port 14551.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><em>QGroundControl</em> returns data, but will not actually &quot;connect&quot; to the example (it will continue to display the message <em>Waiting for Vehicle Connection</em>).</p></div></li><li><p>例子应该开始显示终端收到的数据：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/github/mavlink/examples/linux$ ./mavlink_udp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bytes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Received:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 17</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Datagram:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fe</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 09</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 06</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 08</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 04</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 03</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 19</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 87</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Received</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packet:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SYS:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 255,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> COMP:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LEN:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MSG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bytes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Received:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 17</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Datagram:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fe</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 09</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 01</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 06</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 08</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 04</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 03</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f9</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Received</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packet:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SYS:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 255,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> COMP:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LEN:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MSG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div></li></ol>`,6)]))}const c=i(n,[["render",l]]);export{F as __pageData,c as default};
