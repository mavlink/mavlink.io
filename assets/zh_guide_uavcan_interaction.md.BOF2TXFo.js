import{_ as o,c as a,a8 as t,o as i}from"./chunks/framework.CnRC9NRC.js";const p=JSON.parse('{"title":"UAVCAN 介绍","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/uavcan_interaction.md","filePath":"zh/guide/uavcan_interaction.md"}'),n={name:"zh/guide/uavcan_interaction.md"};function r(d,e,c,s,A,l){return i(),a("div",null,e[0]||(e[0]=[t('<h1 id="uavcan-介绍" tabindex="-1">UAVCAN 介绍 <a class="header-anchor" href="#uavcan-介绍" aria-label="Permalink to &quot;UAVCAN 介绍&quot;">​</a></h1><p>本章描述 MAVLink 命令和信息，以便利操作者的设备与板载 UAVCAN 之间的数据交互。 主要目的是使用户能够通过现有的 MAVLink 连接，配置、监测和控制机上的 UCAVAN 节点。 主要目的是使用户能够通过现有的 MAVLink 连接，配置、监测和控制机上的 UCAVAN 节点。</p><h2 id="概况" tabindex="-1">概况 <a class="header-anchor" href="#概况" aria-label="Permalink to &quot;概况&quot;">​</a></h2><p>The general description and specification of UAVCAN is available at <a href="http://uavcan.org" target="_blank" rel="noreferrer">http://uavcan.org</a>.</p><p>文章将提及以下术语：</p><ul><li><strong>Bridge node</strong> - the piece of on-board equipment that bridges the on-board UAVCAN bus and the MAVLink connection. 这一功能常常由飞行管理单元控制，例如 Pixwik 执行。</li><li><strong>Remote equipment</strong> - the other end of the MAVLink channel, e.g. the ground control station.</li></ul><h3 id="ucan-node-识别" tabindex="-1">UCAN Node 识别 <a class="header-anchor" href="#ucan-node-识别" aria-label="Permalink to &quot;UCAN Node 识别&quot;">​</a></h3><p>每个 UAVCAN 节点都有一个称为“node ID”的总线上唯一的标识符。 节点 id 是间隔 [1, 127] 中的整数, 其中值1通常由自动驾驶仪或其他类型的中央控制单元使用, 和值126和127通常由调试或监视设备使用。 节点 id 是间隔 [1, 127] 中的整数, 其中值1通常由自动驾驶仪或其他类型的中央控制单元使用, 和值126和127通常由调试或监视设备使用。</p><p>每个能够通过 MAVLink 和 UAVCAN 通信的单位必须使用相同的数字，用于 MAVLink 组件ID 和 UCAN Node ID，否则可能会出现严重的不一致之处。 通常情况下, 如果有一个非冗余自动驾驶仪, 其 UAVCAN 节点 id 和 MAVLink 组件 id 将设置为 1 (1)。 通常情况下, 如果有一个非冗余自动驾驶仪, 其 UAVCAN 节点 id 和 MAVLink 组件 id 将设置为 1 (1)。</p><p>与给定 UAVCAN 节点相关的每个输出/传入的 MAVLink 消息/命令都将其字段 组件 id 设置为与所述 UAVCAN 节点的节点 id 相同的值。</p><h2 id="节点状态报告" tabindex="-1">节点状态报告 <a class="header-anchor" href="#节点状态报告" aria-label="Permalink to &quot;节点状态报告&quot;">​</a></h2><h3 id="节点状态消息" tabindex="-1">节点状态消息 <a class="header-anchor" href="#节点状态消息" aria-label="Permalink to &quot;节点状态消息&quot;">​</a></h3><p>In UAVCAN, the abstract node status information is represented by the standard message type <code>uavcan.protocol.NodeStatus</code>. Its MAVLink counterpart is <code>UAVCAN_NODE_STATUS</code>.</p><p>The bridge node should emit the MAVLink message <code>UAVCAN_NODE_STATUS</code> every time it receives a UAVCAN node status message. 允许桥节点对节点状态消息流进行抽取, 以避免 MAVLink 通道的拥塞, 但所产生的状态消息发射频率不应低于每个节点 1 hz。</p><p>远程设备可以通过跟踪自上次接收每个在线节点的节点状态消息以来经过的时间来监控 UAVCAN 节点的联机状态。 如果该节点的最后一个状态消息超过5秒未到达, 则应将该节点视为离线。 如果该节点的最后一个状态消息超过5秒未到达, 则应将该节点视为离线。</p><h3 id="扩展节点信息" tabindex="-1">扩展节点信息 <a class="header-anchor" href="#扩展节点信息" aria-label="Permalink to &quot;扩展节点信息&quot;">​</a></h3><p>UAVCAN nodes are typically able to report some static information that identifies their type, purpose, vendor, revision, and such, via the standard service type <code>uavcan.protocol.GetNodeInfo</code>. 在此上下文中, &quot;静态&quot; 表示在节点运行时数据没有更改。 这种信息对于许多重要的使用案例至关重要。</p><p>The corresponding MAVLink message is <code>UAVCAN_NODE_INFO</code>. Its fields are direct mappings of the corresponding fields in the service type <code>uavcan.protocol.GetNodeInfo</code>.</p><p>The bridge node must emit the message <code>UAVCAN_NODE_INFO</code> in the following cases:</p><ul><li>Reception of a service response of type <code>uavcan.protocol.GetNodeInfo</code>. In turn, this service must be invoked when the following conditions are observed on the bus (please read the UAVCAN specification for a more detailed description of the principles of bus monitoring): <ul><li>一个新的节点在线出现。</li><li>已知节点已重新启动。</li></ul></li><li>Reception of the MAVLink command <code>MAV_CMD_UAVCAN_GET_NODE_INFO</code>. In this case, the bridge node is required to emit <code>UAVCAN_NODE_INFO</code> once for every known node.</li><li>It is also allowed, but not required, to unconditionally emit messages <code>UAVCAN_NODE_INFO</code> at a very low rate, in order to guarantee that the remote equipment always has a valid model of the on-board UAVCAN bus.</li></ul><h2 id="配置参数管理" tabindex="-1">配置参数管理 <a class="header-anchor" href="#配置参数管理" aria-label="Permalink to &quot;配置参数管理&quot;">​</a></h2><p>UAVCAN定义了一套标准服务类型，以便利配置参数管理在 UCAVAN 节点上。 相关的数据类型定义可在命名空间 <code>uavcen.protocol.made</code> 中找到。 The respective data type definitions can be found in the namespace <code>uavcan.protocol.param</code>.</p><p>UAVCAN-MAVLink 桥没有为配置参数管理定义任何额外信息。 相反，以下标准信息经常使用： 相反，以下标准信息经常使用：</p><ul><li><code>PARAM_REQUEST_LIST</code> - used to request the list of configuration parameters from the specified UAVCAN node. 记住，UAVCAN 节点是通过字段组件ID指定的。</li><li><code>PARAM_VALUE</code> - used by the bridge node to report the value of a configuration parameter. 节点ID已反映在字段组件ID中。</li><li><code>PARAM_SET</code> - used by the remote equipment to set the value of a configuration parameter. 节点ID已反映在字段组件ID中。</li></ul><p>请注意，配置参数名称的最大长度在 UAVCAN 和 MAVLink 中定义不同。 在 MAVLink 中，最大长度为16个字符，而在 UAVCAN 中，限制是92个字符。 如果桥节点遇到超过 MAVLink 限制的长期配置参数名称，应该尽力减少 MAVLink 侧名称长度，同时避免歧义。 UAVCAN 网络节点的设计者应避免使用配置参数名称超过 16 个字符，直到 MAVLink 协议的这一缺陷被修复。 在 MAVLink 中，最大长度为16个字符，而在 UAVCAN 中，限制是92个字符。 如果桥节点遇到超过 MAVLink 限制的长期配置参数名称，应该尽力减少 MAVLink 侧名称长度，同时避免歧义。 UAVCAN 网络节点的设计者应避免使用配置参数名称超过 16 个字符，直到 MAVLink 协议的这一缺陷被修复。</p><h2 id="互联网访问桥" tabindex="-1">互联网访问桥 <a class="header-anchor" href="#互联网访问桥" aria-label="Permalink to &quot;互联网访问桥&quot;">​</a></h2><p>UAVCAN定义了一套标准信息，以便利 UAVCAN 节点与远程主机在互联网或 LAN 之间进行通信。 <a href="https://github.com/UAVCAN/dsdl/pull/25" target="_blank" rel="noreferrer">The tentative specification can be viewed on GitHub</a>. 今后，应该扩展 MAVLink 信息，以便通过远程设备(例如地面控制站)传输的桥梁节点与互联网之间的数据包。 If you&#39;re interested in this feature, please report to the <a href="https://groups.google.com/forum/#!forum/uavcan" target="_blank" rel="noreferrer">UAVCAN mailing list</a>.</p>',27)]))}const u=o(n,[["render",r]]);export{p as __pageData,u as default};
