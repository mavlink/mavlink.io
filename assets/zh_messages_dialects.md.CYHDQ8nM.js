import{_ as a,c as i,a8 as t,o as l}from"./chunks/framework.sDsl5pD6.js";const f=JSON.parse('{"title":"Dialects & Test Definitions","description":"","frontmatter":{},"headers":[],"relativePath":"zh/messages/dialects.md","filePath":"zh/messages/dialects.md"}'),s={name:"zh/messages/dialects.md"};function n(o,e,r,m,h,d){return l(),i("div",null,e[0]||(e[0]=[t('<h1 id="dialects-test-definitions" tabindex="-1">Dialects &amp; Test Definitions <a class="header-anchor" href="#dialects-test-definitions" aria-label="Permalink to &quot;Dialects &amp; Test Definitions&quot;">​</a></h1><h2 id="dialects" tabindex="-1">Dialects <a class="header-anchor" href="#dialects" aria-label="Permalink to &quot;Dialects&quot;">​</a></h2><p>MAVLink <em>dialects</em> are XML definition files that define <em>protocol-</em> and <em>vendor-specific</em> messages, enums and commands.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Dialects are not managed by this project!</p><ul><li>They are typically used in only one particular flight stack, and are managed by that flight stack. The XML usually includes owner information as a header comment.</li><li>Vendor forks of MAVLink may contain XML entities that have not yet been pushed into the main repository (and will not be documented).</li></ul></div><p>The dialect definitions are:</p><ul><li><a href="./cubepilot.html">cubepilot.xml</a></li><li><a href="./loweheiser.html">loweheiser.xml</a></li><li><a href="./AVSSUAS.html">AVSSUAS.xml</a></li><li><a href="./ualberta.html">ualberta.xml</a></li><li><a href="./uAvionix.html">uAvionix.xml</a></li><li><a href="./matrixpilot.html">matrixpilot.xml</a></li><li><a href="./ASLUAV.html">ASLUAV.xml</a></li><li><a href="./icarous.html">icarous.xml</a></li><li><a href="./storm32.html">storm32.xml</a></li><li><a href="./paparazzi.html">paparazzi.xml</a></li><li><a href="./ardupilotmega.html">ardupilotmega.xml</a></li><li><a href="./csAirLink.html">csAirLink.xml</a></li></ul><p>Note that dialects may <code>include</code> <a href="./">MAVLink-Standard Definitions</a> or other dialects. Up to 5 levels of XML file nesting are allowed - see <code>MAXIMUM_INCLUDE_FILE_NESTING</code> in <a href="https://github.com/ArduPilot/pymavlink/blob/master/generator/mavgen.py#L44" target="_blank" rel="noreferrer">mavgen.py</a>. A typical pattern is for a dialect to include <a href="./../messages/common.html">common.xml</a> (containing the <em>MAVLink standard definitions</em>), extending it with vendor or protocol specific messages.</p><h2 id="test-definitions" tabindex="-1">Test Definitions <a class="header-anchor" href="#test-definitions" aria-label="Permalink to &quot;Test Definitions&quot;">​</a></h2><p>The following definitions are used for testing and dialect validation:</p><ul><li><a href="./all.html">all.xml</a> — This includes all other XML files, and is used to verify that there are no ID clashes (and can potentially be used by GCS to communicate with any core dialect).</li><li><a href="./test.html">test.xml</a> — Test XML definition file.</li><li><a href="./python_array_test.html">python_array_test.xml</a> — Test XML definition file for arrays.</li></ul><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="./">MAVLink-Standard Definitions</a></li><li><a href="./../guide/xml_schema.html">XSD schema</a></li><li><a href="https://github.com/mavlink/mavlink/blob/master/message_definitions/" target="_blank" rel="noreferrer">mavlink/message_definitions</a> - Source of all XML definition files</li></ul>',12)]))}const p=a(s,[["render",n]]);export{f as __pageData,p as default};
